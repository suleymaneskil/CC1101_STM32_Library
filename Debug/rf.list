
rf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004604  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047ec  080047ec  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080047ec  080047ec  000147ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047f4  080047f4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080047fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000014  08004810  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004810  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012159  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002240  00000000  00000000  0003219d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001060  00000000  00000000  000343e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f48  00000000  00000000  00035440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022222  00000000  00000000  00036388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c817  00000000  00000000  000585aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc5f4  00000000  00000000  00064dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001313b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000448c  00000000  00000000  00131430  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000014 	.word	0x20000014
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004778 	.word	0x08004778

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000018 	.word	0x20000018
 80001c8:	08004778 	.word	0x08004778

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <DWT_Delay_us+0x3c>)
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80004da:	f001 ff81 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 80004de:	4602      	mov	r2, r0
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <DWT_Delay_us+0x40>)
 80004e2:	fba3 2302 	umull	r2, r3, r3, r2
 80004e6:	0c9b      	lsrs	r3, r3, #18
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	fb02 f303 	mul.w	r3, r2, r3
 80004ee:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80004f0:	bf00      	nop
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <DWT_Delay_us+0x3c>)
 80004f4:	685a      	ldr	r2, [r3, #4]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	1ad2      	subs	r2, r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d3f8      	bcc.n	80004f2 <DWT_Delay_us+0x26>
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	e0001000 	.word	0xe0001000
 800050c:	431bde83 	.word	0x431bde83

08000510 <__spi_write>:
#define RANDOM_MULTIPLIER       109
#define RSSI_VALID_DELAY_US     1300

//static UINT8 rnd_seed = 0;

HAL_StatusTypeDef __spi_write(uint8_t *addr, uint8_t *pData, uint16_t size){
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	4613      	mov	r3, r2
 800051c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <__spi_write+0x80>)
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <__spi_write+0x84>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	2200      	movs	r2, #0
 8000528:	4619      	mov	r1, r3
 800052a:	f001 f939 	bl	80017a0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)); //CS pini LOW yaptığımızd MISO pini adres yazılmadan önce low da beklemeli
 800052e:	bf00      	nop
 8000530:	2140      	movs	r1, #64	; 0x40
 8000532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000536:	f001 f91b 	bl	8001770 <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1f7      	bne.n	8000530 <__spi_write+0x20>
	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <__spi_write+0x88>)
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000548:	2201      	movs	r2, #1
 800054a:	68f9      	ldr	r1, [r7, #12]
 800054c:	f002 fb7e 	bl	8002c4c <HAL_SPI_Transmit>
 8000550:	4603      	mov	r3, r0
 8000552:	75fb      	strb	r3, [r7, #23]
	if(status==HAL_OK && pData!=NULL)
 8000554:	7dfb      	ldrb	r3, [r7, #23]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d10c      	bne.n	8000574 <__spi_write+0x64>
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d009      	beq.n	8000574 <__spi_write+0x64>
		status = HAL_SPI_Transmit(hal_spi, pData, size, 0xFFFF);
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <__spi_write+0x88>)
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	88fa      	ldrh	r2, [r7, #6]
 8000566:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800056a:	68b9      	ldr	r1, [r7, #8]
 800056c:	f002 fb6e 	bl	8002c4c <HAL_SPI_Transmit>
 8000570:	4603      	mov	r3, r0
 8000572:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__spi_write+0x80>)
 8000576:	6818      	ldr	r0, [r3, #0]
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <__spi_write+0x84>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	2201      	movs	r2, #1
 800057e:	4619      	mov	r1, r3
 8000580:	f001 f90e 	bl	80017a0 <HAL_GPIO_WritePin>
	return status;
 8000584:	7dfb      	ldrb	r3, [r7, #23]

}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000030 	.word	0x20000030
 8000594:	20000038 	.word	0x20000038
 8000598:	20000034 	.word	0x20000034

0800059c <__spi_read>:

HAL_StatusTypeDef __spi_read(uint8_t *addr, uint8_t *pData, uint16_t size){
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4613      	mov	r3, r2
 80005a8:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <__spi_read+0x74>)
 80005ac:	6818      	ldr	r0, [r3, #0]
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <__spi_read+0x78>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	2200      	movs	r2, #0
 80005b4:	4619      	mov	r1, r3
 80005b6:	f001 f8f3 	bl	80017a0 <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)); //CS pini LOW yaptığımızd MISO pini adres yazılmadan önce low da beklemeli
 80005ba:	bf00      	nop
 80005bc:	2140      	movs	r1, #64	; 0x40
 80005be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c2:	f001 f8d5 	bl	8001770 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1f7      	bne.n	80005bc <__spi_read+0x20>
	//HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <__spi_read+0x7c>)
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d4:	2201      	movs	r2, #1
 80005d6:	68f9      	ldr	r1, [r7, #12]
 80005d8:	f002 fb38 	bl	8002c4c <HAL_SPI_Transmit>
 80005dc:	4603      	mov	r3, r0
 80005de:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(hal_spi, pData, size, 0xFFFF);
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <__spi_read+0x7c>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	88fa      	ldrh	r2, [r7, #6]
 80005e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ea:	68b9      	ldr	r1, [r7, #8]
 80005ec:	f002 fc94 	bl	8002f18 <HAL_SPI_Receive>
 80005f0:	4603      	mov	r3, r0
 80005f2:	75fb      	strb	r3, [r7, #23]

//	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)); //CS pini LOW yaptığımızd MISO pini adres yazılmadan önce low da beklemeli

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <__spi_read+0x74>)
 80005f6:	6818      	ldr	r0, [r3, #0]
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <__spi_read+0x78>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	2201      	movs	r2, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	f001 f8ce 	bl	80017a0 <HAL_GPIO_WritePin>

	return status;
 8000604:	7dfb      	ldrb	r3, [r7, #23]

}
 8000606:	4618      	mov	r0, r3
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000030 	.word	0x20000030
 8000614:	20000038 	.word	0x20000038
 8000618:	20000034 	.word	0x20000034

0800061c <TI_write_reg>:

void TI_write_reg(UINT8 addr, UINT8 value)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	460a      	mov	r2, r1
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	4613      	mov	r3, r2
 800062a:	71bb      	strb	r3, [r7, #6]
	__spi_write(&addr, &value, 1);
 800062c:	1db9      	adds	r1, r7, #6
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	2201      	movs	r2, #1
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff6c 	bl	8000510 <__spi_write>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <TI_write_burst_reg>:

void TI_write_burst_reg(BYTE addr, BYTE* buffer, BYTE count)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	71fb      	strb	r3, [r7, #7]
 800064c:	4613      	mov	r3, r2
 800064e:	71bb      	strb	r3, [r7, #6]
	addr = (addr | WRITE_BURST);
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000656:	b2db      	uxtb	r3, r3
 8000658:	71fb      	strb	r3, [r7, #7]
	__spi_write(&addr, buffer, count);
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	b29a      	uxth	r2, r3
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	6839      	ldr	r1, [r7, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff54 	bl	8000510 <__spi_write>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <TI_strobe>:

void TI_strobe(BYTE strobe)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	__spi_write(&strobe, 0, 0);
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff45 	bl	8000510 <__spi_write>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <TI_read_reg>:


BYTE TI_read_reg(BYTE addr)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b084      	sub	sp, #16
 8000692:	af00      	add	r7, sp, #0
 8000694:	4603      	mov	r3, r0
 8000696:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	addr= (addr | READ_SINGLE);
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	71fb      	strb	r3, [r7, #7]
	__spi_read(&addr, &data, 1);
 80006a2:	f107 010f 	add.w	r1, r7, #15
 80006a6:	1dfb      	adds	r3, r7, #7
 80006a8:	2201      	movs	r2, #1
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff76 	bl	800059c <__spi_read>
	return data;
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <TI_read_status>:

BYTE TI_read_status(BYTE addr)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b084      	sub	sp, #16
 80006be:	af00      	add	r7, sp, #0
 80006c0:	4603      	mov	r3, r0
 80006c2:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	addr= (addr | READ_BURST);
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	71fb      	strb	r3, [r7, #7]
	__spi_read(&addr, &data, 1);
 80006ce:	f107 010f 	add.w	r1, r7, #15
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	2201      	movs	r2, #1
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff60 	bl	800059c <__spi_read>
	return data;
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <TI_read_burst_reg>:

void TI_read_burst_reg(BYTE addr, BYTE* buffer, BYTE count)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b082      	sub	sp, #8
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	4603      	mov	r3, r0
 80006ee:	6039      	str	r1, [r7, #0]
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	4613      	mov	r3, r2
 80006f4:	71bb      	strb	r3, [r7, #6]
	addr= (addr | READ_BURST);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	71fb      	strb	r3, [r7, #7]
	__spi_read(&addr, buffer, count);
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	b29a      	uxth	r2, r3
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	6839      	ldr	r1, [r7, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff47 	bl	800059c <__spi_read>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <TI_receive_packet>:

BOOL TI_receive_packet(BYTE* rxBuffer, UINT8 *length)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	6039      	str	r1, [r7, #0]
	BYTE status[2];
	UINT8 packet_len;
	// This status register is safe to read since it will not be updated after
	// the packet has been received (See the CC1100 and 2500 Errata Note)
	if (TI_read_status(CCxxx0_RXBYTES) & BYTES_IN_RXFIFO)
 8000720:	203b      	movs	r0, #59	; 0x3b
 8000722:	f7ff ffca 	bl	80006ba <TI_read_status>
 8000726:	4603      	mov	r3, r0
 8000728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800072c:	2b00      	cmp	r3, #0
 800072e:	d029      	beq.n	8000784 <TI_receive_packet+0x6e>
	{
		// Read length byte
		packet_len = TI_read_reg(CCxxx0_RXFIFO);
 8000730:	203f      	movs	r0, #63	; 0x3f
 8000732:	f7ff ffac 	bl	800068e <TI_read_reg>
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]

		// Read data from RX FIFO and store in rxBuffer
		if (packet_len <= *length)
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	7bfa      	ldrb	r2, [r7, #15]
 8000740:	429a      	cmp	r2, r3
 8000742:	d814      	bhi.n	800076e <TI_receive_packet+0x58>
		{
			TI_read_burst_reg(CCxxx0_RXFIFO, rxBuffer, packet_len);
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	461a      	mov	r2, r3
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	203f      	movs	r0, #63	; 0x3f
 800074c:	f7ff ffcb 	bl	80006e6 <TI_read_burst_reg>
			*length = packet_len;
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	7bfa      	ldrb	r2, [r7, #15]
 8000754:	701a      	strb	r2, [r3, #0]

			// Read the 2 appended status bytes (status[0] = RSSI, status[1] = LQI)
			TI_read_burst_reg(CCxxx0_RXFIFO, status, 2);
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2202      	movs	r2, #2
 800075c:	4619      	mov	r1, r3
 800075e:	203f      	movs	r0, #63	; 0x3f
 8000760:	f7ff ffc1 	bl	80006e6 <TI_read_burst_reg>
			//while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0));
			//while(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0));
			// MSB of LQI is the CRC_OK bit
			return(status[LQI] & CRC_OK);
 8000764:	7b7b      	ldrb	r3, [r7, #13]
 8000766:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800076a:	b2db      	uxtb	r3, r3
 800076c:	e00b      	b.n	8000786 <TI_receive_packet+0x70>
		}
		else
		{
			*length = packet_len;
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	7bfa      	ldrb	r2, [r7, #15]
 8000772:	701a      	strb	r2, [r3, #0]

			// Make sure that the radio is in IDLE state before flushing the FIFO
			// (Unless RXOFF_MODE has been changed, the radio should be in IDLE state at this point)
			TI_strobe(CCxxx0_SIDLE);
 8000774:	2036      	movs	r0, #54	; 0x36
 8000776:	f7ff ff7b 	bl	8000670 <TI_strobe>

			// Flush RX FIFO
			TI_strobe(CCxxx0_SFRX);
 800077a:	203a      	movs	r0, #58	; 0x3a
 800077c:	f7ff ff78 	bl	8000670 <TI_strobe>
			return(FALSE);
 8000780:	2300      	movs	r3, #0
 8000782:	e000      	b.n	8000786 <TI_receive_packet+0x70>
		}
	}
	else return(FALSE);
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <init_serial>:

void init_serial(UART_HandleTypeDef* huart){
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

	hal_uart = huart;
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <init_serial+0x1c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6013      	str	r3, [r2, #0]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	2000003c 	.word	0x2000003c

080007b0 <TI_write_settings>:
//it is also high
BYTE paTable[] = {0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0};


void TI_write_settings()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	//
	// Rf settings for CC1101
	//

	//i checked in smartRF studio 7 of Mr. ilynx's code // the setting is yours
	TI_write_reg(CCxxx0_IOCFG2,0x29);  //GDO2 Output Pin Configuration
 80007b4:	2129      	movs	r1, #41	; 0x29
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff ff30 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_IOCFG1,0x2E);  //GDO1 Output Pin Configuration
 80007bc:	212e      	movs	r1, #46	; 0x2e
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff ff2c 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_IOCFG0,0x06);  //GDO0 Output Pin Configuration
 80007c4:	2106      	movs	r1, #6
 80007c6:	2002      	movs	r0, #2
 80007c8:	f7ff ff28 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_FIFOTHR,0x47); //RX FIFO and TX FIFO Thresholds
 80007cc:	2147      	movs	r1, #71	; 0x47
 80007ce:	2003      	movs	r0, #3
 80007d0:	f7ff ff24 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_SYNC1,0xD3);   //Sync Word, High Byte
 80007d4:	21d3      	movs	r1, #211	; 0xd3
 80007d6:	2004      	movs	r0, #4
 80007d8:	f7ff ff20 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_SYNC0,0x91);   //Sync Word, Low Byte
 80007dc:	2191      	movs	r1, #145	; 0x91
 80007de:	2005      	movs	r0, #5
 80007e0:	f7ff ff1c 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_PKTLEN,0xFF);  //Packet Length
 80007e4:	21ff      	movs	r1, #255	; 0xff
 80007e6:	2006      	movs	r0, #6
 80007e8:	f7ff ff18 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_PKTCTRL1,0x04);//Packet Automation Control
 80007ec:	2104      	movs	r1, #4
 80007ee:	2007      	movs	r0, #7
 80007f0:	f7ff ff14 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_PKTCTRL0,0x05);//Packet Automation Control
 80007f4:	2105      	movs	r1, #5
 80007f6:	2008      	movs	r0, #8
 80007f8:	f7ff ff10 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_ADDR,0x00);    //Device Address
 80007fc:	2100      	movs	r1, #0
 80007fe:	2009      	movs	r0, #9
 8000800:	f7ff ff0c 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_CHANNR,0x00);  //Channel Number
 8000804:	2100      	movs	r1, #0
 8000806:	200a      	movs	r0, #10
 8000808:	f7ff ff08 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_FSCTRL1,0x08); //Frequency Synthesizer Control
 800080c:	2108      	movs	r1, #8
 800080e:	200b      	movs	r0, #11
 8000810:	f7ff ff04 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_FSCTRL0,0x00); //Frequency Synthesizer Control
 8000814:	2100      	movs	r1, #0
 8000816:	200c      	movs	r0, #12
 8000818:	f7ff ff00 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_FREQ2,0x10);   //Frequency Control Word, High Byte
 800081c:	2110      	movs	r1, #16
 800081e:	200d      	movs	r0, #13
 8000820:	f7ff fefc 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_FREQ1,0xB4);   //Frequency Control Word, Middle Byte
 8000824:	21b4      	movs	r1, #180	; 0xb4
 8000826:	200e      	movs	r0, #14
 8000828:	f7ff fef8 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_FREQ0,0x2E);   //Frequency Control Word, Low Byte
 800082c:	212e      	movs	r1, #46	; 0x2e
 800082e:	200f      	movs	r0, #15
 8000830:	f7ff fef4 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG4,0xCA); //Modem Configuration
 8000834:	21ca      	movs	r1, #202	; 0xca
 8000836:	2010      	movs	r0, #16
 8000838:	f7ff fef0 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG3,0x83); //Modem Configuration
 800083c:	2183      	movs	r1, #131	; 0x83
 800083e:	2011      	movs	r0, #17
 8000840:	f7ff feec 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG2,0x93); //Modem Configuration
 8000844:	2193      	movs	r1, #147	; 0x93
 8000846:	2012      	movs	r0, #18
 8000848:	f7ff fee8 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG1,0x22); //Modem Configuration
 800084c:	2122      	movs	r1, #34	; 0x22
 800084e:	2013      	movs	r0, #19
 8000850:	f7ff fee4 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG0,0xF8); //Modem Configuration
 8000854:	21f8      	movs	r1, #248	; 0xf8
 8000856:	2014      	movs	r0, #20
 8000858:	f7ff fee0 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_DEVIATN,0x34); //Modem Deviation Setting
 800085c:	2134      	movs	r1, #52	; 0x34
 800085e:	2015      	movs	r0, #21
 8000860:	f7ff fedc 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_MCSM2,0x07);   //Main Radio Control State Machine Configuration
 8000864:	2107      	movs	r1, #7
 8000866:	2016      	movs	r0, #22
 8000868:	f7ff fed8 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_MCSM1,0x30);   //Main Radio Control State Machine Configuration
 800086c:	2130      	movs	r1, #48	; 0x30
 800086e:	2017      	movs	r0, #23
 8000870:	f7ff fed4 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_MCSM0,0x18);   //Main Radio Control State Machine Configuration
 8000874:	2118      	movs	r1, #24
 8000876:	2018      	movs	r0, #24
 8000878:	f7ff fed0 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_FOCCFG,0x16);  //Frequency Offset Compensation Configuration
 800087c:	2116      	movs	r1, #22
 800087e:	2019      	movs	r0, #25
 8000880:	f7ff fecc 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_BSCFG,0x6C);   //Bit Synchronization Configuration
 8000884:	216c      	movs	r1, #108	; 0x6c
 8000886:	201a      	movs	r0, #26
 8000888:	f7ff fec8 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_AGCCTRL2,0x43);//AGC Control
 800088c:	2143      	movs	r1, #67	; 0x43
 800088e:	201b      	movs	r0, #27
 8000890:	f7ff fec4 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_AGCCTRL1,0x40);//AGC Control
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	201c      	movs	r0, #28
 8000898:	f7ff fec0 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_AGCCTRL0,0x91);//AGC Control
 800089c:	2191      	movs	r1, #145	; 0x91
 800089e:	201d      	movs	r0, #29
 80008a0:	f7ff febc 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_WOREVT1,0x87); //High Byte Event0 Timeout
 80008a4:	2187      	movs	r1, #135	; 0x87
 80008a6:	201e      	movs	r0, #30
 80008a8:	f7ff feb8 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_WOREVT0,0x6B); //Low Byte Event0 Timeout
 80008ac:	216b      	movs	r1, #107	; 0x6b
 80008ae:	201f      	movs	r0, #31
 80008b0:	f7ff feb4 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_WORCTRL,0xF8); //Wake On Radio Control
 80008b4:	21f8      	movs	r1, #248	; 0xf8
 80008b6:	2020      	movs	r0, #32
 80008b8:	f7ff feb0 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_FREND1,0x56);  //Front End RX Configuration
 80008bc:	2156      	movs	r1, #86	; 0x56
 80008be:	2021      	movs	r0, #33	; 0x21
 80008c0:	f7ff feac 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_FREND0,0x10);  //Front End TX Configuration
 80008c4:	2110      	movs	r1, #16
 80008c6:	2022      	movs	r0, #34	; 0x22
 80008c8:	f7ff fea8 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_FSCAL3,0xE9);  //Frequency Synthesizer Calibration
 80008cc:	21e9      	movs	r1, #233	; 0xe9
 80008ce:	2023      	movs	r0, #35	; 0x23
 80008d0:	f7ff fea4 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_FSCAL2,0x2A);  //Frequency Synthesizer Calibration
 80008d4:	212a      	movs	r1, #42	; 0x2a
 80008d6:	2024      	movs	r0, #36	; 0x24
 80008d8:	f7ff fea0 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_FSCAL1,0x00);  //Frequency Synthesizer Calibration
 80008dc:	2100      	movs	r1, #0
 80008de:	2025      	movs	r0, #37	; 0x25
 80008e0:	f7ff fe9c 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_FSCAL0,0x1F);  //Frequency Synthesizer Calibration
 80008e4:	211f      	movs	r1, #31
 80008e6:	2026      	movs	r0, #38	; 0x26
 80008e8:	f7ff fe98 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_RCCTRL1,0x41); //RC Oscillator Configuration
 80008ec:	2141      	movs	r1, #65	; 0x41
 80008ee:	2027      	movs	r0, #39	; 0x27
 80008f0:	f7ff fe94 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_RCCTRL0,0x00); //RC Oscillator Configuration
 80008f4:	2100      	movs	r1, #0
 80008f6:	2028      	movs	r0, #40	; 0x28
 80008f8:	f7ff fe90 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_FSTEST,0x59);  //Frequency Synthesizer Calibration Control
 80008fc:	2159      	movs	r1, #89	; 0x59
 80008fe:	2029      	movs	r0, #41	; 0x29
 8000900:	f7ff fe8c 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_PTEST,0x7F);   //Production Test
 8000904:	217f      	movs	r1, #127	; 0x7f
 8000906:	202a      	movs	r0, #42	; 0x2a
 8000908:	f7ff fe88 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_AGCTEST,0x3F); //AGC Test
 800090c:	213f      	movs	r1, #63	; 0x3f
 800090e:	202b      	movs	r0, #43	; 0x2b
 8000910:	f7ff fe84 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_TEST2,0x81);   //Various Test Settings
 8000914:	2181      	movs	r1, #129	; 0x81
 8000916:	202c      	movs	r0, #44	; 0x2c
 8000918:	f7ff fe80 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_TEST1,0x35);   //Various Test Settings
 800091c:	2135      	movs	r1, #53	; 0x35
 800091e:	202d      	movs	r0, #45	; 0x2d
 8000920:	f7ff fe7c 	bl	800061c <TI_write_reg>
	TI_write_reg(CCxxx0_TEST0,0x09);   //Various Test Settings
 8000924:	2109      	movs	r1, #9
 8000926:	202e      	movs	r0, #46	; 0x2e
 8000928:	f7ff fe78 	bl	800061c <TI_write_reg>
    TI_write_reg(CCxxx0_IOCFG0,   settings->IOCFG0);
    TI_write_reg(CCxxx0_PKTCTRL1, settings->PKTCTRL1);
    TI_write_reg(CCxxx0_PKTCTRL0, settings->PKTCTRL0);
    TI_write_reg(CCxxx0_ADDR,     settings->ADDR);
    TI_write_reg(CCxxx0_PKTLEN,   settings->PKTLEN);*/
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <Power_up_reset>:

void Power_up_reset()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	//Güç geldikten sonra CC1101 i Macro resetlemek için

	DWT_Delay_Init();
 8000934:	f000 f88c 	bl	8000a50 <DWT_Delay_Init>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <Power_up_reset+0x88>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <Power_up_reset+0x8c>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	2201      	movs	r2, #1
 8000942:	4619      	mov	r1, r3
 8000944:	f000 ff2c 	bl	80017a0 <HAL_GPIO_WritePin>
	DWT_Delay_us(1);
 8000948:	2001      	movs	r0, #1
 800094a:	f7ff fdbf 	bl	80004cc <DWT_Delay_us>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <Power_up_reset+0x88>)
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <Power_up_reset+0x8c>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	2200      	movs	r2, #0
 8000958:	4619      	mov	r1, r3
 800095a:	f000 ff21 	bl	80017a0 <HAL_GPIO_WritePin>
	DWT_Delay_us(1);
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff fdb4 	bl	80004cc <DWT_Delay_us>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <Power_up_reset+0x88>)
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <Power_up_reset+0x8c>)
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	2201      	movs	r2, #1
 800096e:	4619      	mov	r1, r3
 8000970:	f000 ff16 	bl	80017a0 <HAL_GPIO_WritePin>
	DWT_Delay_us(41);
 8000974:	2029      	movs	r0, #41	; 0x29
 8000976:	f7ff fda9 	bl	80004cc <DWT_Delay_us>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <Power_up_reset+0x88>)
 800097c:	6818      	ldr	r0, [r3, #0]
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <Power_up_reset+0x8c>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	2200      	movs	r2, #0
 8000984:	4619      	mov	r1, r3
 8000986:	f000 ff0b 	bl	80017a0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)); //CS pini LOW yaptığımızd MISO pini adres yazılmadan önce low da beklemeli
 800098a:	bf00      	nop
 800098c:	2140      	movs	r1, #64	; 0x40
 800098e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000992:	f000 feed 	bl	8001770 <HAL_GPIO_ReadPin>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1f7      	bne.n	800098c <Power_up_reset+0x5c>
	TI_strobe(CCxxx0_SRES);
 800099c:	2030      	movs	r0, #48	; 0x30
 800099e:	f7ff fe67 	bl	8000670 <TI_strobe>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <Power_up_reset+0x88>)
 80009a4:	6818      	ldr	r0, [r3, #0]
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <Power_up_reset+0x8c>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	2201      	movs	r2, #1
 80009ac:	4619      	mov	r1, r3
 80009ae:	f000 fef7 	bl	80017a0 <HAL_GPIO_WritePin>
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000030 	.word	0x20000030
 80009bc:	20000038 	.word	0x20000038

080009c0 <TI_init>:


void TI_init(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	4613      	mov	r3, r2
 80009cc:	80fb      	strh	r3, [r7, #6]
	//UINT8 i;
	//UINT16 delay;
	BYTE status;
	hal_spi = hspi;
 80009ce:	4a1c      	ldr	r2, [pc, #112]	; (8000a40 <TI_init+0x80>)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	6013      	str	r3, [r2, #0]
	CS_GPIO_Port = cs_port;
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <TI_init+0x84>)
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	6013      	str	r3, [r2, #0]
	CS_Pin = cs_pin;
 80009da:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <TI_init+0x88>)
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	8013      	strh	r3, [r2, #0]


	for(int i=0; i<10; i++){
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	e007      	b.n	80009f6 <TI_init+0x36>
	status = TI_read_status(CCxxx0_VERSION);
 80009e6:	2031      	movs	r0, #49	; 0x31
 80009e8:	f7ff fe67 	bl	80006ba <TI_read_status>
 80009ec:	4603      	mov	r3, r0
 80009ee:	74fb      	strb	r3, [r7, #19]
	for(int i=0; i<10; i++){
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3301      	adds	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	2b09      	cmp	r3, #9
 80009fa:	ddf4      	ble.n	80009e6 <TI_init+0x26>
		  if(status!=0x14)
		  {
		  }
	}
	TI_strobe(CCxxx0_SFRX); //î÷èùàåì RX FIFO
 80009fc:	203a      	movs	r0, #58	; 0x3a
 80009fe:	f7ff fe37 	bl	8000670 <TI_strobe>
	TI_strobe(CCxxx0_SFTX); //î÷èùàåì TX FIFO
 8000a02:	203b      	movs	r0, #59	; 0x3b
 8000a04:	f7ff fe34 	bl	8000670 <TI_strobe>
	TI_write_settings();
 8000a08:	f7ff fed2 	bl	80007b0 <TI_write_settings>
	TI_write_burst_reg(CCxxx0_PATABLE, paTable, 8);//is it true
 8000a0c:	2208      	movs	r2, #8
 8000a0e:	490f      	ldr	r1, [pc, #60]	; (8000a4c <TI_init+0x8c>)
 8000a10:	203e      	movs	r0, #62	; 0x3e
 8000a12:	f7ff fe15 	bl	8000640 <TI_write_burst_reg>

	TI_write_reg(CCxxx0_FIFOTHR, 0x07);
 8000a16:	2107      	movs	r1, #7
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f7ff fdff 	bl	800061c <TI_write_reg>

	TI_strobe(CCxxx0_SIDLE); //ïåðåâîäèì ìîäåì â IDLE
 8000a1e:	2036      	movs	r0, #54	; 0x36
 8000a20:	f7ff fe26 	bl	8000670 <TI_strobe>
	TI_strobe(CCxxx0_SFRX); //î÷èùàåì RX FIFO
 8000a24:	203a      	movs	r0, #58	; 0x3a
 8000a26:	f7ff fe23 	bl	8000670 <TI_strobe>
	TI_strobe(CCxxx0_SFTX); //î÷èùàåì TX FIFO
 8000a2a:	203b      	movs	r0, #59	; 0x3b
 8000a2c:	f7ff fe20 	bl	8000670 <TI_strobe>
	  rnd_seed = (rnd_seed << 1) | (TI_read_status(CCxxx0_RSSI) & 0x01);
	}

	rnd_seed |= 0x0080;*/

	TI_strobe(CCxxx0_SIDLE);
 8000a30:	2036      	movs	r0, #54	; 0x36
 8000a32:	f7ff fe1d 	bl	8000670 <TI_strobe>
}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000034 	.word	0x20000034
 8000a44:	20000030 	.word	0x20000030
 8000a48:	20000038 	.word	0x20000038
 8000a4c:	20000000 	.word	0x20000000

08000a50 <DWT_Delay_Init>:
 *  Created on: Mar 11, 2020
 *      Author: suleyman.eskil
 */
#include "dw_stm32_delay.h"

uint32_t DWT_Delay_Init(void) {
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <DWT_Delay_Init+0x58>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <DWT_Delay_Init+0x58>)
 8000a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a5e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <DWT_Delay_Init+0x58>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <DWT_Delay_Init+0x58>)
 8000a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a6a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <DWT_Delay_Init+0x5c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <DWT_Delay_Init+0x5c>)
 8000a72:	f023 0301 	bic.w	r3, r3, #1
 8000a76:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <DWT_Delay_Init+0x5c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <DWT_Delay_Init+0x5c>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <DWT_Delay_Init+0x5c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000a8a:	bf00      	nop
     __ASM volatile ("NOP");
 8000a8c:	bf00      	nop
     __ASM volatile ("NOP");
 8000a8e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <DWT_Delay_Init+0x5c>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e000      	b.n	8000a9e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000a9c:	2301      	movs	r3, #1
  }
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000edf0 	.word	0xe000edf0
 8000aac:	e0001000 	.word	0xe0001000

08000ab0 <UserLEDHide>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UserLEDHide()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2108      	movs	r1, #8
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <UserLEDHide+0x14>)
 8000aba:	f000 fe71 	bl	80017a0 <HAL_GPIO_WritePin>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	48000400 	.word	0x48000400

08000ac8 <UserLEDShow>:


void UserLEDShow()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2108      	movs	r1, #8
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <UserLEDShow+0x14>)
 8000ad2:	f000 fe65 	bl	80017a0 <HAL_GPIO_WritePin>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	48000400 	.word	0x48000400

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b09b      	sub	sp, #108	; 0x6c
 8000ae4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae6:	f000 fb9e 	bl	8001226 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aea:	f000 f88d 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aee:	f000 f955 	bl	8000d9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000af2:	f000 f923 	bl	8000d3c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000af6:	f000 f8e3 	bl	8000cc0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  BYTE status;
  Power_up_reset();
 8000afa:	f7ff ff19 	bl	8000930 <Power_up_reset>
  TI_init(&hspi1, CS_GPIO_Port, CS_Pin);
 8000afe:	2220      	movs	r2, #32
 8000b00:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000b04:	483a      	ldr	r0, [pc, #232]	; (8000bf0 <main+0x110>)
 8000b06:	f7ff ff5b 	bl	80009c0 <TI_init>

#else

  //for receiver modem

  MX_USART2_UART_Init();
 8000b0a:	f000 f917 	bl	8000d3c <MX_USART2_UART_Init>
  init_serial(&huart2);
 8000b0e:	4839      	ldr	r0, [pc, #228]	; (8000bf4 <main+0x114>)
 8000b10:	f7ff fe3e 	bl	8000790 <init_serial>

  char buffer[64]; //we didnt use buffer, we use rxBuffer, you know
  char mesaj[15];
  char kontrol[15] = {'A', 'k', 'r', 'a', 't', 'e', 'k', ' ', 'R', 'F', ' ', 'T', 'e', 's', 't' };
 8000b14:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <main+0x118>)
 8000b16:	1d3c      	adds	r4, r7, #4
 8000b18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b1a:	c407      	stmia	r4!, {r0, r1, r2}
 8000b1c:	8023      	strh	r3, [r4, #0]
 8000b1e:	3402      	adds	r4, #2
 8000b20:	0c1b      	lsrs	r3, r3, #16
 8000b22:	7023      	strb	r3, [r4, #0]
  BYTE length;

  TI_write_reg(CCxxx0_IOCFG0, 0x06);
 8000b24:	2106      	movs	r1, #6
 8000b26:	2002      	movs	r0, #2
 8000b28:	f7ff fd78 	bl	800061c <TI_write_reg>

  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8000b2c:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <main+0x11c>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	615a      	str	r2, [r3, #20]

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b32:	2006      	movs	r0, #6
 8000b34:	f000 fca4 	bl	8001480 <HAL_NVIC_EnableIRQ>
  while(1)
  {
	  BYTE status;
	  BYTE LQI;

	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8000b38:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <main+0x11c>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	615a      	str	r2, [r3, #20]

	  GDO0_FLAG = 0;
 8000b3e:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <main+0x120>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]

	  TI_strobe(CCxxx0_SFRX);
 8000b44:	203a      	movs	r0, #58	; 0x3a
 8000b46:	f7ff fd93 	bl	8000670 <TI_strobe>
	  TI_strobe(CCxxx0_SRX);
 8000b4a:	2034      	movs	r0, #52	; 0x34
 8000b4c:	f7ff fd90 	bl	8000670 <TI_strobe>

//	  while(HAL_GPIO_ReadPin(GDO0_GPIO_Port, GDO0_Pin) == GPIO_PIN_RESET);
	  while(GDO0_FLAG == 0);
 8000b50:	bf00      	nop
 8000b52:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <main+0x120>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d0fa      	beq.n	8000b52 <main+0x72>

	  status = TI_read_status(CCxxx0_RXBYTES);
 8000b5c:	203b      	movs	r0, #59	; 0x3b
 8000b5e:	f7ff fdac 	bl	80006ba <TI_read_status>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	  if (!(status & 0x7f)) continue;
 8000b68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d03b      	beq.n	8000bec <main+0x10c>

	  uint8_t value = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	  //status = TI_read_status(CCxxx0_PKTSTATUS);
	  LQI = TI_read_status(CCxxx0_LQI);
 8000b7a:	2033      	movs	r0, #51	; 0x33
 8000b7c:	f7ff fd9d 	bl	80006ba <TI_read_status>
 8000b80:	4603      	mov	r3, r0
 8000b82:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	  //the reciver led is not blink, turn of
	  if (LQI & 0x80 /*CRC_OK*/)
 8000b86:	f997 3065 	ldrsb.w	r3, [r7, #101]	; 0x65
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	da24      	bge.n	8000bd8 <main+0xf8>
	  {
		  status = TI_receive_packet(buffer, &length);
 8000b8e:	1cfa      	adds	r2, r7, #3
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fdbd 	bl	8000716 <TI_receive_packet>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		  //by the way i want to use low power mode but the current is nano amper or micro amper
		  // I think you cannot get the power consumption less than micro amper
		  // I am sorry now I will disconnect
		  // ok thank you,
		  /*HAL_UART_Transmit(&huart2, "gelen veri:", 11, HAL_MAX_DELAY);*/
		  HAL_UART_Transmit(&huart2, (uint8_t*)mesaj, sizeof(mesaj), HAL_MAX_DELAY);
 8000ba2:	f107 0114 	add.w	r1, r7, #20
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	220f      	movs	r2, #15
 8000bac:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <main+0x114>)
 8000bae:	f003 f8db 	bl	8003d68 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, "\n\r", 2, HAL_MAX_DELAY);
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	4912      	ldr	r1, [pc, #72]	; (8000c04 <main+0x124>)
 8000bba:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <main+0x114>)
 8000bbc:	f003 f8d4 	bl	8003d68 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, mesaj[i] , sizeof(mesaj), HAL_MAX_DELAY);
		  }
		  HAL_UART_Transmit(&huart2, "\n\r", 2, HAL_MAX_DELAY);*/


		  if (value == 0)
 8000bc0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1b7      	bne.n	8000b38 <main+0x58>
		  {
			  UserLEDShow();
 8000bc8:	f7ff ff7e 	bl	8000ac8 <UserLEDShow>

			  HAL_Delay(50);
 8000bcc:	2032      	movs	r0, #50	; 0x32
 8000bce:	f000 fb61 	bl	8001294 <HAL_Delay>

			  UserLEDHide();
 8000bd2:	f7ff ff6d 	bl	8000ab0 <UserLEDHide>
 8000bd6:	e7af      	b.n	8000b38 <main+0x58>
		  }
	  }
	  else
	  {
		  status = TI_read_status(CCxxx0_PKTSTATUS);
 8000bd8:	2038      	movs	r0, #56	; 0x38
 8000bda:	f7ff fd6e 	bl	80006ba <TI_read_status>
 8000bde:	4603      	mov	r3, r0
 8000be0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		  GDO0_FLAG = 0;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <main+0x120>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	e7a5      	b.n	8000b38 <main+0x58>
	  if (!(status & 0x7f)) continue;
 8000bec:	bf00      	nop
  {
 8000bee:	e7a3      	b.n	8000b38 <main+0x58>
 8000bf0:	20000040 	.word	0x20000040
 8000bf4:	200000a8 	.word	0x200000a8
 8000bf8:	08004794 	.word	0x08004794
 8000bfc:	40010400 	.word	0x40010400
 8000c00:	200000a4 	.word	0x200000a4
 8000c04:	08004790 	.word	0x08004790

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b0ac      	sub	sp, #176	; 0xb0
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c12:	2244      	movs	r2, #68	; 0x44
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f003 fda6 	bl	8004768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2254      	movs	r2, #84	; 0x54
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 fd98 	bl	8004768 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c40:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c42:	2310      	movs	r3, #16
 8000c44:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fe39 	bl	80018c8 <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c5c:	f000 f932 	bl	8000ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c60:	230f      	movs	r3, #15
 8000c62:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c64:	2301      	movs	r3, #1
 8000c66:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 fa44 	bl	8002108 <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c86:	f000 f91d 	bl	8000ec4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 fc6d 	bl	8002574 <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ca0:	f000 f910 	bl	8000ec4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ca4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ca8:	f000 fdb8 	bl	800181c <HAL_PWREx_ControlVoltageScaling>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cb2:	f000 f907 	bl	8000ec4 <Error_Handler>
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	37b0      	adds	r7, #176	; 0xb0
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <MX_SPI1_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000ccc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cda:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d0e:	2207      	movs	r2, #7
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d20:	f001 ff0a 	bl	8002b38 <HAL_SPI_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 f8cb 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000040 	.word	0x20000040
 8000d38:	40013000 	.word	0x40013000

08000d3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d42:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <MX_USART2_UART_Init+0x5c>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d80:	f002 ffa4 	bl	8003ccc <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d8a:	f000 f89b 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000a8 	.word	0x200000a8
 8000d98:	40004400 	.word	0x40004400

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <MX_GPIO_Init+0xd0>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	4a2d      	ldr	r2, [pc, #180]	; (8000e6c <MX_GPIO_Init+0xd0>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <MX_GPIO_Init+0xd0>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <MX_GPIO_Init+0xd0>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a27      	ldr	r2, [pc, #156]	; (8000e6c <MX_GPIO_Init+0xd0>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <MX_GPIO_Init+0xd0>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_GPIO_Init+0xd0>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <MX_GPIO_Init+0xd0>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_GPIO_Init+0xd0>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e02:	f000 fccd 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2108      	movs	r1, #8
 8000e0a:	4819      	ldr	r0, [pc, #100]	; (8000e70 <MX_GPIO_Init+0xd4>)
 8000e0c:	f000 fcc8 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000e10:	2320      	movs	r3, #32
 8000e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f000 fb37 	bl	800149c <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
	HAL_GPIO_Init(Yukari_Pin_Port, &GPIO_InitStruct);

#else
  /*Configure GPIO pin : GDO0_Pin */
  GPIO_InitStruct.Pin = GDO0_Pin;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;//GPIO_MODE_IT_RISING;
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_GPIO_Init+0xd8>)
 8000e34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8000e36:	2301      	movs	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GDO0_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <MX_GPIO_Init+0xd4>)
 8000e42:	f000 fb2b 	bl	800149c <HAL_GPIO_Init>
  //HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(EXTI0_IRQn);
#endif

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000e46:	2308      	movs	r3, #8
 8000e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_GPIO_Init+0xd4>)
 8000e5e:	f000 fb1d 	bl	800149c <HAL_GPIO_Init>

}
 8000e62:	bf00      	nop
 8000e64:	3720      	adds	r7, #32
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48000400 	.word	0x48000400
 8000e74:	10210000 	.word	0x10210000

08000e78 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GDO0_Pin){
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d102      	bne.n	8000e8e <HAL_GPIO_EXTI_Callback+0x16>
			GDO0_FLAG = 1;
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <HAL_GPIO_EXTI_Callback+0x24>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
		}
}//ok, did you disconnect it from GND? // yes i disconnect to GDO0 but i didnt connect GDO0pin to GND, beacuse breadboard has problem can you try again
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	200000a4 	.word	0x200000a4

08000ea0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eb2:	f000 f9d1 	bl	8001258 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40012c00 	.word	0x40012c00

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_MspInit+0x44>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_MspInit+0x44>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_MspInit+0x44>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_MspInit+0x44>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_MspInit+0x44>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6593      	str	r3, [r2, #88]	; 0x58
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_MspInit+0x44>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <HAL_SPI_MspInit+0x7c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d128      	bne.n	8000f90 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_SPI_MspInit+0x80>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	4a16      	ldr	r2, [pc, #88]	; (8000f9c <HAL_SPI_MspInit+0x80>)
 8000f44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f48:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_SPI_MspInit+0x80>)
 8000f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_SPI_MspInit+0x80>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_SPI_MspInit+0x80>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_SPI_MspInit+0x80>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000f6e:	23c2      	movs	r3, #194	; 0xc2
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f7e:	2305      	movs	r3, #5
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8c:	f000 fa86 	bl	800149c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40013000 	.word	0x40013000
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a20      	ldr	r2, [pc, #128]	; (8001040 <HAL_UART_MspInit+0xa0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d13a      	bne.n	8001038 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <HAL_UART_MspInit+0xa4>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	; (8001044 <HAL_UART_MspInit+0xa4>)
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <HAL_UART_MspInit+0xa4>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <HAL_UART_MspInit+0xa4>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a19      	ldr	r2, [pc, #100]	; (8001044 <HAL_UART_MspInit+0xa4>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_UART_MspInit+0xa4>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001002:	2307      	movs	r3, #7
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f000 fa44 	bl	800149c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001014:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001026:	2303      	movs	r3, #3
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f000 fa32 	bl	800149c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40004400 	.word	0x40004400
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	2019      	movs	r0, #25
 800105e:	f000 f9f3 	bl	8001448 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8001062:	2019      	movs	r0, #25
 8001064:	f000 fa0c 	bl	8001480 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <HAL_InitTick+0x9c>)
 800106a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <HAL_InitTick+0x9c>)
 800106e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001072:	6613      	str	r3, [r2, #96]	; 0x60
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_InitTick+0x9c>)
 8001076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001080:	f107 0210 	add.w	r2, r7, #16
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f001 f9e0 	bl	8002450 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001090:	f001 f9c8 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8001094:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001098:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <HAL_InitTick+0xa0>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	0c9b      	lsrs	r3, r3, #18
 80010a0:	3b01      	subs	r3, #1
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <HAL_InitTick+0xa4>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <HAL_InitTick+0xa8>)
 80010a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <HAL_InitTick+0xa4>)
 80010ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <HAL_InitTick+0xa4>)
 80010b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <HAL_InitTick+0xa4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_InitTick+0xa4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <HAL_InitTick+0xa4>)
 80010c6:	f002 fbd7 	bl	8003878 <HAL_TIM_Base_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d104      	bne.n	80010da <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010d0:	4806      	ldr	r0, [pc, #24]	; (80010ec <HAL_InitTick+0xa4>)
 80010d2:	f002 fc07 	bl	80038e4 <HAL_TIM_Base_Start_IT>
 80010d6:	4603      	mov	r3, r0
 80010d8:	e000      	b.n	80010dc <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3730      	adds	r7, #48	; 0x30
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40021000 	.word	0x40021000
 80010e8:	431bde83 	.word	0x431bde83
 80010ec:	20000128 	.word	0x20000128
 80010f0:	40012c00 	.word	0x40012c00

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800114a:	f002 fbf5 	bl	8003938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000128 	.word	0x20000128

08001158 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */

void EXTI0_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800115c:	2001      	movs	r0, #1
 800115e:	f000 fb37 	bl	80017d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <SystemInit+0x64>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001172:	4a16      	ldr	r2, [pc, #88]	; (80011cc <SystemInit+0x64>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <SystemInit+0x68>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <SystemInit+0x68>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <SystemInit+0x68>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <SystemInit+0x68>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <SystemInit+0x68>)
 8001194:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001198:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800119c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <SystemInit+0x68>)
 80011a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <SystemInit+0x68>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <SystemInit+0x68>)
 80011ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <SystemInit+0x68>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SystemInit+0x64>)
 80011ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011be:	609a      	str	r2, [r3, #8]
#endif
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00
 80011d0:	40021000 	.word	0x40021000

080011d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011da:	e003      	b.n	80011e4 <LoopCopyDataInit>

080011dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011e2:	3104      	adds	r1, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011e4:	480b      	ldr	r0, [pc, #44]	; (8001214 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011ec:	d3f6      	bcc.n	80011dc <CopyDataInit>
	ldr	r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <LoopForever+0x12>)
	b	LoopFillZerobss
 80011f0:	e002      	b.n	80011f8 <LoopFillZerobss>

080011f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011f4:	f842 3b04 	str.w	r3, [r2], #4

080011f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <LoopForever+0x16>)
	cmp	r2, r3
 80011fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011fc:	d3f9      	bcc.n	80011f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011fe:	f7ff ffb3 	bl	8001168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f003 fa8d 	bl	8004720 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001206:	f7ff fc6b 	bl	8000ae0 <main>

0800120a <LoopForever>:

LoopForever:
    b LoopForever
 800120a:	e7fe      	b.n	800120a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800120c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001210:	080047fc 	.word	0x080047fc
	ldr	r0, =_sdata
 8001214:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001218:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 800121c:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001220:	2000016c 	.word	0x2000016c

08001224 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC1_IRQHandler>

08001226 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 f8fe 	bl	8001432 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff ff06 	bl	8001048 <HAL_InitTick>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	71fb      	strb	r3, [r7, #7]
 8001246:	e001      	b.n	800124c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001248:	f7ff fe44 	bl	8000ed4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800124c:	79fb      	ldrb	r3, [r7, #7]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_IncTick+0x1c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_IncTick+0x20>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4413      	add	r3, r2
 8001266:	4a03      	ldr	r2, [pc, #12]	; (8001274 <HAL_IncTick+0x1c>)
 8001268:	6013      	str	r3, [r2, #0]
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	20000168 	.word	0x20000168
 8001278:	20000010 	.word	0x20000010

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000168 	.word	0x20000168

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d004      	beq.n	80012b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_Delay+0x40>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4413      	add	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b8:	bf00      	nop
 80012ba:	f7ff ffdf 	bl	800127c <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d8f7      	bhi.n	80012ba <HAL_Delay+0x26>
  {
  }
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000010 	.word	0x20000010

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <__NVIC_EnableIRQ+0x38>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff4c 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800145a:	f7ff ff61 	bl	8001320 <__NVIC_GetPriorityGrouping>
 800145e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	68b9      	ldr	r1, [r7, #8]
 8001464:	6978      	ldr	r0, [r7, #20]
 8001466:	f7ff ffb1 	bl	80013cc <NVIC_EncodePriority>
 800146a:	4602      	mov	r2, r0
 800146c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff80 	bl	8001378 <__NVIC_SetPriority>
}
 8001478:	bf00      	nop
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff54 	bl	800133c <__NVIC_EnableIRQ>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014aa:	e148      	b.n	800173e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	2101      	movs	r1, #1
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	4013      	ands	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 813a 	beq.w	8001738 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d00b      	beq.n	80014e4 <HAL_GPIO_Init+0x48>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d007      	beq.n	80014e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d8:	2b11      	cmp	r3, #17
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b12      	cmp	r3, #18
 80014e2:	d130      	bne.n	8001546 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800151a:	2201      	movs	r2, #1
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	f003 0201 	and.w	r2, r3, #1
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0xea>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b12      	cmp	r3, #18
 8001584:	d123      	bne.n	80015ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	08da      	lsrs	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3208      	adds	r2, #8
 800158e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001592:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	220f      	movs	r2, #15
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	08da      	lsrs	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3208      	adds	r2, #8
 80015c8:	6939      	ldr	r1, [r7, #16]
 80015ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	2203      	movs	r2, #3
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 0203 	and.w	r2, r3, #3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 8094 	beq.w	8001738 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001610:	4b52      	ldr	r3, [pc, #328]	; (800175c <HAL_GPIO_Init+0x2c0>)
 8001612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001614:	4a51      	ldr	r2, [pc, #324]	; (800175c <HAL_GPIO_Init+0x2c0>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6613      	str	r3, [r2, #96]	; 0x60
 800161c:	4b4f      	ldr	r3, [pc, #316]	; (800175c <HAL_GPIO_Init+0x2c0>)
 800161e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001628:	4a4d      	ldr	r2, [pc, #308]	; (8001760 <HAL_GPIO_Init+0x2c4>)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3302      	adds	r3, #2
 8001630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	220f      	movs	r2, #15
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001652:	d00d      	beq.n	8001670 <HAL_GPIO_Init+0x1d4>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a43      	ldr	r2, [pc, #268]	; (8001764 <HAL_GPIO_Init+0x2c8>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d007      	beq.n	800166c <HAL_GPIO_Init+0x1d0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a42      	ldr	r2, [pc, #264]	; (8001768 <HAL_GPIO_Init+0x2cc>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d101      	bne.n	8001668 <HAL_GPIO_Init+0x1cc>
 8001664:	2302      	movs	r3, #2
 8001666:	e004      	b.n	8001672 <HAL_GPIO_Init+0x1d6>
 8001668:	2307      	movs	r3, #7
 800166a:	e002      	b.n	8001672 <HAL_GPIO_Init+0x1d6>
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_GPIO_Init+0x1d6>
 8001670:	2300      	movs	r3, #0
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	f002 0203 	and.w	r2, r2, #3
 8001678:	0092      	lsls	r2, r2, #2
 800167a:	4093      	lsls	r3, r2
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001682:	4937      	ldr	r1, [pc, #220]	; (8001760 <HAL_GPIO_Init+0x2c4>)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001690:	4b36      	ldr	r3, [pc, #216]	; (800176c <HAL_GPIO_Init+0x2d0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016b4:	4a2d      	ldr	r2, [pc, #180]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016de:	4a23      	ldr	r2, [pc, #140]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001708:	4a18      	ldr	r2, [pc, #96]	; (800176c <HAL_GPIO_Init+0x2d0>)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_GPIO_Init+0x2d0>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001732:	4a0e      	ldr	r2, [pc, #56]	; (800176c <HAL_GPIO_Init+0x2d0>)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	f47f aeaf 	bne.w	80014ac <HAL_GPIO_Init+0x10>
  }
}
 800174e:	bf00      	nop
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000
 8001764:	48000400 	.word	0x48000400
 8001768:	48000800 	.word	0x48000800
 800176c:	40010400 	.word	0x40010400

08001770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d002      	beq.n	800178e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	e001      	b.n	8001792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017be:	887a      	ldrh	r2, [r7, #2]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d006      	beq.n	80017f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fb42 	bl	8000e78 <HAL_GPIO_EXTI_Callback>
  }
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40010400 	.word	0x40010400

08001800 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <HAL_PWREx_GetVoltageRange+0x18>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40007000 	.word	0x40007000

0800181c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800182a:	d130      	bne.n	800188e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800182c:	4b23      	ldr	r3, [pc, #140]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001838:	d038      	beq.n	80018ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001842:	4a1e      	ldr	r2, [pc, #120]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001844:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001848:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2232      	movs	r2, #50	; 0x32
 8001850:	fb02 f303 	mul.w	r3, r2, r3
 8001854:	4a1b      	ldr	r2, [pc, #108]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	0c9b      	lsrs	r3, r3, #18
 800185c:	3301      	adds	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001860:	e002      	b.n	8001868 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3b01      	subs	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001874:	d102      	bne.n	800187c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f2      	bne.n	8001862 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001888:	d110      	bne.n	80018ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e00f      	b.n	80018ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800189a:	d007      	beq.n	80018ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a05      	ldr	r2, [pc, #20]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40007000 	.word	0x40007000
 80018c0:	20000008 	.word	0x20000008
 80018c4:	431bde83 	.word	0x431bde83

080018c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f000 bc11 	b.w	80020fe <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018dc:	4ba0      	ldr	r3, [pc, #640]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e6:	4b9e      	ldr	r3, [pc, #632]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80e4 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d007      	beq.n	8001914 <HAL_RCC_OscConfig+0x4c>
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b0c      	cmp	r3, #12
 8001908:	f040 808b 	bne.w	8001a22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b01      	cmp	r3, #1
 8001910:	f040 8087 	bne.w	8001a22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001914:	4b92      	ldr	r3, [pc, #584]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_OscConfig+0x64>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e3e8      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1a      	ldr	r2, [r3, #32]
 8001930:	4b8b      	ldr	r3, [pc, #556]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <HAL_RCC_OscConfig+0x7e>
 800193c:	4b88      	ldr	r3, [pc, #544]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001944:	e005      	b.n	8001952 <HAL_RCC_OscConfig+0x8a>
 8001946:	4b86      	ldr	r3, [pc, #536]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001952:	4293      	cmp	r3, r2
 8001954:	d223      	bcs.n	800199e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fdaa 	bl	80024b4 <RCC_SetFlashLatencyFromMSIRange>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e3c9      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800196a:	4b7d      	ldr	r3, [pc, #500]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7c      	ldr	r2, [pc, #496]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001970:	f043 0308 	orr.w	r3, r3, #8
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b7a      	ldr	r3, [pc, #488]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4977      	ldr	r1, [pc, #476]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001988:	4b75      	ldr	r3, [pc, #468]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	4972      	ldr	r1, [pc, #456]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
 800199c:	e025      	b.n	80019ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800199e:	4b70      	ldr	r3, [pc, #448]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a6f      	ldr	r2, [pc, #444]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b6d      	ldr	r3, [pc, #436]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	496a      	ldr	r1, [pc, #424]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	4965      	ldr	r1, [pc, #404]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fd6a 	bl	80024b4 <RCC_SetFlashLatencyFromMSIRange>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e389      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ea:	f000 fc6f 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 80019ee:	4601      	mov	r1, r0
 80019f0:	4b5b      	ldr	r3, [pc, #364]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	4a5a      	ldr	r2, [pc, #360]	; (8001b64 <HAL_RCC_OscConfig+0x29c>)
 80019fc:	5cd3      	ldrb	r3, [r2, r3]
 80019fe:	f003 031f 	and.w	r3, r3, #31
 8001a02:	fa21 f303 	lsr.w	r3, r1, r3
 8001a06:	4a58      	ldr	r2, [pc, #352]	; (8001b68 <HAL_RCC_OscConfig+0x2a0>)
 8001a08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a0a:	4b58      	ldr	r3, [pc, #352]	; (8001b6c <HAL_RCC_OscConfig+0x2a4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fb1a 	bl	8001048 <HAL_InitTick>
 8001a14:	4603      	mov	r3, r0
 8001a16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d052      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	e36d      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d032      	beq.n	8001a90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a2a:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a4c      	ldr	r2, [pc, #304]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a36:	f7ff fc21 	bl	800127c <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fc1d 	bl	800127c <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e356      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a50:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a5c:	4b40      	ldr	r3, [pc, #256]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a3f      	ldr	r2, [pc, #252]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001a62:	f043 0308 	orr.w	r3, r3, #8
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	493a      	ldr	r1, [pc, #232]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a7a:	4b39      	ldr	r3, [pc, #228]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	4935      	ldr	r1, [pc, #212]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
 8001a8e:	e01a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a90:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a32      	ldr	r2, [pc, #200]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fbee 	bl	800127c <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fbea 	bl	800127c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e323      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x1dc>
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ac4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d073      	beq.n	8001bba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x21c>
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2b0c      	cmp	r3, #12
 8001adc:	d10e      	bne.n	8001afc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d10b      	bne.n	8001afc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d063      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x2f0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d15f      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e300      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b04:	d106      	bne.n	8001b14 <HAL_RCC_OscConfig+0x24c>
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a15      	ldr	r2, [pc, #84]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e01d      	b.n	8001b50 <HAL_RCC_OscConfig+0x288>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x270>
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0x288>
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <HAL_RCC_OscConfig+0x298>)
 8001b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01b      	beq.n	8001b90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff fb90 	bl	800127c <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b5e:	e010      	b.n	8001b82 <HAL_RCC_OscConfig+0x2ba>
 8001b60:	40021000 	.word	0x40021000
 8001b64:	080047a4 	.word	0x080047a4
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff fb84 	bl	800127c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e2bd      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b82:	4baf      	ldr	r3, [pc, #700]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x2a8>
 8001b8e:	e014      	b.n	8001bba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff fb74 	bl	800127c <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b98:	f7ff fb70 	bl	800127c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e2a9      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001baa:	4ba5      	ldr	r3, [pc, #660]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x2d0>
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d060      	beq.n	8001c88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x310>
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d119      	bne.n	8001c06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d116      	bne.n	8001c06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd8:	4b99      	ldr	r3, [pc, #612]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x328>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e286      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf0:	4b93      	ldr	r3, [pc, #588]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	061b      	lsls	r3, r3, #24
 8001bfe:	4990      	ldr	r1, [pc, #576]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c04:	e040      	b.n	8001c88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d023      	beq.n	8001c56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0e:	4b8c      	ldr	r3, [pc, #560]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a8b      	ldr	r2, [pc, #556]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fb2f 	bl	800127c <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c22:	f7ff fb2b 	bl	800127c <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e264      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c34:	4b82      	ldr	r3, [pc, #520]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c40:	4b7f      	ldr	r3, [pc, #508]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	061b      	lsls	r3, r3, #24
 8001c4e:	497c      	ldr	r1, [pc, #496]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
 8001c54:	e018      	b.n	8001c88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c56:	4b7a      	ldr	r3, [pc, #488]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a79      	ldr	r2, [pc, #484]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff fb0b 	bl	800127c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fb07 	bl	800127c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e240      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c7c:	4b70      	ldr	r3, [pc, #448]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d03c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01c      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9c:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca2:	4a67      	ldr	r2, [pc, #412]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7ff fae6 	bl	800127c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fae2 	bl	800127c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e21b      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc6:	4b5e      	ldr	r3, [pc, #376]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0ef      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x3ec>
 8001cd4:	e01b      	b.n	8001d0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd6:	4b5a      	ldr	r3, [pc, #360]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cdc:	4a58      	ldr	r2, [pc, #352]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001cde:	f023 0301 	bic.w	r3, r3, #1
 8001ce2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce6:	f7ff fac9 	bl	800127c <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cee:	f7ff fac5 	bl	800127c <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1fe      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d00:	4b4f      	ldr	r3, [pc, #316]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ef      	bne.n	8001cee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80a6 	beq.w	8001e68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d20:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10d      	bne.n	8001d48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2c:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a43      	ldr	r2, [pc, #268]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
 8001d38:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d44:	2301      	movs	r3, #1
 8001d46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d48:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <HAL_RCC_OscConfig+0x57c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d118      	bne.n	8001d86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d54:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <HAL_RCC_OscConfig+0x57c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a3a      	ldr	r2, [pc, #232]	; (8001e44 <HAL_RCC_OscConfig+0x57c>)
 8001d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d60:	f7ff fa8c 	bl	800127c <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d68:	f7ff fa88 	bl	800127c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e1c1      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7a:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <HAL_RCC_OscConfig+0x57c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d108      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4d8>
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d94:	4a2a      	ldr	r2, [pc, #168]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d9e:	e024      	b.n	8001dea <HAL_RCC_OscConfig+0x522>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d110      	bne.n	8001dca <HAL_RCC_OscConfig+0x502>
 8001da8:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dae:	4a24      	ldr	r2, [pc, #144]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db8:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbe:	4a20      	ldr	r2, [pc, #128]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc8:	e00f      	b.n	8001dea <HAL_RCC_OscConfig+0x522>
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de0:	4a17      	ldr	r2, [pc, #92]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001de2:	f023 0304 	bic.w	r3, r3, #4
 8001de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d016      	beq.n	8001e20 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df2:	f7ff fa43 	bl	800127c <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7ff fa3f 	bl	800127c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e176      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_OscConfig+0x578>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0ed      	beq.n	8001dfa <HAL_RCC_OscConfig+0x532>
 8001e1e:	e01a      	b.n	8001e56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff fa2c 	bl	800127c <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e26:	e00f      	b.n	8001e48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7ff fa28 	bl	800127c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d906      	bls.n	8001e48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e15f      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e48:	4baa      	ldr	r3, [pc, #680]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1e8      	bne.n	8001e28 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e56:	7ffb      	ldrb	r3, [r7, #31]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d105      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5c:	4ba5      	ldr	r3, [pc, #660]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e60:	4aa4      	ldr	r2, [pc, #656]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0320 	and.w	r3, r3, #32
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d03c      	beq.n	8001eee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01c      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e7c:	4b9d      	ldr	r3, [pc, #628]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e82:	4a9c      	ldr	r2, [pc, #624]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f9f6 	bl	800127c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e94:	f7ff f9f2 	bl	800127c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e12b      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ea6:	4b93      	ldr	r3, [pc, #588]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0ef      	beq.n	8001e94 <HAL_RCC_OscConfig+0x5cc>
 8001eb4:	e01b      	b.n	8001eee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001eb6:	4b8f      	ldr	r3, [pc, #572]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ebc:	4a8d      	ldr	r2, [pc, #564]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001ebe:	f023 0301 	bic.w	r3, r3, #1
 8001ec2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec6:	f7ff f9d9 	bl	800127c <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ece:	f7ff f9d5 	bl	800127c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e10e      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ee0:	4b84      	ldr	r3, [pc, #528]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1ef      	bne.n	8001ece <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8102 	beq.w	80020fc <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	f040 80c5 	bne.w	800208c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f02:	4b7c      	ldr	r3, [pc, #496]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f003 0203 	and.w	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d12c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	3b01      	subs	r3, #1
 8001f22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d123      	bne.n	8001f70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d11b      	bne.n	8001f70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d113      	bne.n	8001f70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	085b      	lsrs	r3, r3, #1
 8001f54:	3b01      	subs	r3, #1
 8001f56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d109      	bne.n	8001f70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d067      	beq.n	8002040 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d062      	beq.n	800203c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f76:	4b5f      	ldr	r3, [pc, #380]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0bb      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f86:	4b5b      	ldr	r3, [pc, #364]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a5a      	ldr	r2, [pc, #360]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001f8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f92:	f7ff f973 	bl	800127c <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7ff f96f 	bl	800127c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0a8      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fac:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f0      	bne.n	8001f9a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb8:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	4b4e      	ldr	r3, [pc, #312]	; (80020f8 <HAL_RCC_OscConfig+0x830>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fc8:	3a01      	subs	r2, #1
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	4311      	orrs	r1, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fd2:	0212      	lsls	r2, r2, #8
 8001fd4:	4311      	orrs	r1, r2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fda:	0852      	lsrs	r2, r2, #1
 8001fdc:	3a01      	subs	r2, #1
 8001fde:	0552      	lsls	r2, r2, #21
 8001fe0:	4311      	orrs	r1, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fe6:	0852      	lsrs	r2, r2, #1
 8001fe8:	3a01      	subs	r2, #1
 8001fea:	0652      	lsls	r2, r2, #25
 8001fec:	4311      	orrs	r1, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ff2:	06d2      	lsls	r2, r2, #27
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	493f      	ldr	r1, [pc, #252]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ffc:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a3c      	ldr	r2, [pc, #240]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8002002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002006:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002008:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4a39      	ldr	r2, [pc, #228]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 800200e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002012:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002014:	f7ff f932 	bl	800127c <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201c:	f7ff f92e 	bl	800127c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e067      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202e:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800203a:	e05f      	b.n	80020fc <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e05e      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002040:	4b2c      	ldr	r3, [pc, #176]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d157      	bne.n	80020fc <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800204c:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a28      	ldr	r2, [pc, #160]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8002052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002056:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002058:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 800205e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002062:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002064:	f7ff f90a 	bl	800127c <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206c:	f7ff f906 	bl	800127c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e03f      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x7a4>
 800208a:	e037      	b.n	80020fc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d02d      	beq.n	80020ee <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 8002098:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800209c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 80020b0:	f023 0303 	bic.w	r3, r3, #3
 80020b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 80020bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80020c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c6:	f7ff f8d9 	bl	800127c <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ce:	f7ff f8d5 	bl	800127c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e00e      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <HAL_RCC_OscConfig+0x82c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f0      	bne.n	80020ce <HAL_RCC_OscConfig+0x806>
 80020ec:	e006      	b.n	80020fc <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e005      	b.n	80020fe <HAL_RCC_OscConfig+0x836>
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop

08002108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0c8      	b.n	80022ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b66      	ldr	r3, [pc, #408]	; (80022b8 <HAL_RCC_ClockConfig+0x1b0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b63      	ldr	r3, [pc, #396]	; (80022b8 <HAL_RCC_ClockConfig+0x1b0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 0207 	bic.w	r2, r3, #7
 8002132:	4961      	ldr	r1, [pc, #388]	; (80022b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b5f      	ldr	r3, [pc, #380]	; (80022b8 <HAL_RCC_ClockConfig+0x1b0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b0      	b.n	80022ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d04c      	beq.n	80021f2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d107      	bne.n	8002170 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002160:	4b56      	ldr	r3, [pc, #344]	; (80022bc <HAL_RCC_ClockConfig+0x1b4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d121      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e09e      	b.n	80022ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d107      	bne.n	8002188 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002178:	4b50      	ldr	r3, [pc, #320]	; (80022bc <HAL_RCC_ClockConfig+0x1b4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d115      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e092      	b.n	80022ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002190:	4b4a      	ldr	r3, [pc, #296]	; (80022bc <HAL_RCC_ClockConfig+0x1b4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e086      	b.n	80022ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a0:	4b46      	ldr	r3, [pc, #280]	; (80022bc <HAL_RCC_ClockConfig+0x1b4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e07e      	b.n	80022ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021b0:	4b42      	ldr	r3, [pc, #264]	; (80022bc <HAL_RCC_ClockConfig+0x1b4>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 0203 	bic.w	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	493f      	ldr	r1, [pc, #252]	; (80022bc <HAL_RCC_ClockConfig+0x1b4>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c2:	f7ff f85b 	bl	800127c <HAL_GetTick>
 80021c6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ca:	f7ff f857 	bl	800127c <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e066      	b.n	80022ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_RCC_ClockConfig+0x1b4>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 020c 	and.w	r2, r3, #12
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d1eb      	bne.n	80021ca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fe:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <HAL_RCC_ClockConfig+0x1b4>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	492c      	ldr	r1, [pc, #176]	; (80022bc <HAL_RCC_ClockConfig+0x1b4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002210:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d210      	bcs.n	8002240 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 0207 	bic.w	r2, r3, #7
 8002226:	4924      	ldr	r1, [pc, #144]	; (80022b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e036      	b.n	80022ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <HAL_RCC_ClockConfig+0x1b4>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4918      	ldr	r1, [pc, #96]	; (80022bc <HAL_RCC_ClockConfig+0x1b4>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800226a:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_RCC_ClockConfig+0x1b4>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4910      	ldr	r1, [pc, #64]	; (80022bc <HAL_RCC_ClockConfig+0x1b4>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800227e:	f000 f825 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 8002282:	4601      	mov	r1, r0
 8002284:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <HAL_RCC_ClockConfig+0x1b4>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002290:	5cd3      	ldrb	r3, [r2, r3]
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	fa21 f303 	lsr.w	r3, r1, r3
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fed0 	bl	8001048 <HAL_InitTick>
 80022a8:	4603      	mov	r3, r0
 80022aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80022ac:	7afb      	ldrb	r3, [r7, #11]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40022000 	.word	0x40022000
 80022bc:	40021000 	.word	0x40021000
 80022c0:	080047a4 	.word	0x080047a4
 80022c4:	20000008 	.word	0x20000008
 80022c8:	2000000c 	.word	0x2000000c

080022cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022da:	4b3d      	ldr	r3, [pc, #244]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e4:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x34>
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d121      	bne.n	800233e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d11e      	bne.n	800233e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002300:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d107      	bne.n	800231c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800230c:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800230e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	e005      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800231c:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002328:	4a2a      	ldr	r2, [pc, #168]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002330:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10d      	bne.n	8002354 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2b04      	cmp	r3, #4
 8002342:	d102      	bne.n	800234a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002344:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	e004      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b08      	cmp	r3, #8
 800234e:	d101      	bne.n	8002354 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002350:	4b22      	ldr	r3, [pc, #136]	; (80023dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002352:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	2b0c      	cmp	r3, #12
 8002358:	d133      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d002      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0xa4>
 800236a:	2b03      	cmp	r3, #3
 800236c:	d003      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0xaa>
 800236e:	e005      	b.n	800237c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002372:	617b      	str	r3, [r7, #20]
      break;
 8002374:	e005      	b.n	8002382 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002376:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002378:	617b      	str	r3, [r7, #20]
      break;
 800237a:	e002      	b.n	8002382 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	617b      	str	r3, [r7, #20]
      break;
 8002380:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	3301      	adds	r3, #1
 800238e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	fb02 f203 	mul.w	r2, r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	0e5b      	lsrs	r3, r3, #25
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	3301      	adds	r3, #1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023c2:	69bb      	ldr	r3, [r7, #24]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3724      	adds	r7, #36	; 0x24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40021000 	.word	0x40021000
 80023d4:	080047bc 	.word	0x080047bc
 80023d8:	00f42400 	.word	0x00f42400
 80023dc:	007a1200 	.word	0x007a1200

080023e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000008 	.word	0x20000008

080023f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023fc:	f7ff fff0 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002400:	4601      	mov	r1, r0
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	080047b4 	.word	0x080047b4

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002428:	f7ff ffda 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 800242c:	4601      	mov	r1, r0
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0adb      	lsrs	r3, r3, #11
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_RCC_GetPCLK2Freq+0x28>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	080047b4 	.word	0x080047b4

08002450 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	220f      	movs	r2, #15
 800245e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_GetClockConfig+0x5c>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0203 	and.w	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <HAL_RCC_GetClockConfig+0x5c>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <HAL_RCC_GetClockConfig+0x5c>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_RCC_GetClockConfig+0x5c>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	08db      	lsrs	r3, r3, #3
 800248a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <HAL_RCC_GetClockConfig+0x60>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0207 	and.w	r2, r3, #7
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	601a      	str	r2, [r3, #0]
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40022000 	.word	0x40022000

080024b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024bc:	2300      	movs	r3, #0
 80024be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024c0:	4b2a      	ldr	r3, [pc, #168]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024cc:	f7ff f998 	bl	8001800 <HAL_PWREx_GetVoltageRange>
 80024d0:	6178      	str	r0, [r7, #20]
 80024d2:	e014      	b.n	80024fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	4a24      	ldr	r2, [pc, #144]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024de:	6593      	str	r3, [r2, #88]	; 0x58
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024ec:	f7ff f988 	bl	8001800 <HAL_PWREx_GetVoltageRange>
 80024f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	4a1d      	ldr	r2, [pc, #116]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002504:	d10b      	bne.n	800251e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b80      	cmp	r3, #128	; 0x80
 800250a:	d919      	bls.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2ba0      	cmp	r3, #160	; 0xa0
 8002510:	d902      	bls.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002512:	2302      	movs	r3, #2
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	e013      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002518:	2301      	movs	r3, #1
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	e010      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b80      	cmp	r3, #128	; 0x80
 8002522:	d902      	bls.n	800252a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002524:	2303      	movs	r3, #3
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	e00a      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b80      	cmp	r3, #128	; 0x80
 800252e:	d102      	bne.n	8002536 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002530:	2302      	movs	r3, #2
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	e004      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b70      	cmp	r3, #112	; 0x70
 800253a:	d101      	bne.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800253c:	2301      	movs	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 0207 	bic.w	r2, r3, #7
 8002548:	4909      	ldr	r1, [pc, #36]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	429a      	cmp	r2, r3
 800255c:	d001      	beq.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	40022000 	.word	0x40022000

08002574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800257c:	2300      	movs	r3, #0
 800257e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002580:	2300      	movs	r3, #0
 8002582:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258c:	2b00      	cmp	r3, #0
 800258e:	d02f      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002598:	d005      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800259a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800259e:	d015      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x58>
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80025a4:	e00f      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80025a6:	4bac      	ldr	r3, [pc, #688]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	4aab      	ldr	r2, [pc, #684]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025b2:	e00c      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f9cc 	bl	8002958 <RCCEx_PLLSAI1_Config>
 80025c0:	4603      	mov	r3, r0
 80025c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025c4:	e003      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	74fb      	strb	r3, [r7, #19]
      break;
 80025ca:	e000      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80025cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ce:	7cfb      	ldrb	r3, [r7, #19]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10b      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025d4:	4ba0      	ldr	r3, [pc, #640]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	499d      	ldr	r1, [pc, #628]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025ea:	e001      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 8099 	beq.w	8002730 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002602:	4b95      	ldr	r3, [pc, #596]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002612:	2300      	movs	r3, #0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00d      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b8f      	ldr	r3, [pc, #572]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	4a8e      	ldr	r2, [pc, #568]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002622:	6593      	str	r3, [r2, #88]	; 0x58
 8002624:	4b8c      	ldr	r3, [pc, #560]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002630:	2301      	movs	r3, #1
 8002632:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002634:	4b89      	ldr	r3, [pc, #548]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a88      	ldr	r2, [pc, #544]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800263a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002640:	f7fe fe1c 	bl	800127c <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002646:	e009      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002648:	f7fe fe18 	bl	800127c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d902      	bls.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	74fb      	strb	r3, [r7, #19]
        break;
 800265a:	e005      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800265c:	4b7f      	ldr	r3, [pc, #508]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ef      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d155      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800266e:	4b7a      	ldr	r3, [pc, #488]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002678:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01e      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	429a      	cmp	r2, r3
 8002688:	d019      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800268a:	4b73      	ldr	r3, [pc, #460]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002694:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002696:	4b70      	ldr	r3, [pc, #448]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269c:	4a6e      	ldr	r2, [pc, #440]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800269e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026a6:	4b6c      	ldr	r3, [pc, #432]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ac:	4a6a      	ldr	r2, [pc, #424]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026b6:	4a68      	ldr	r2, [pc, #416]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d016      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fdd8 	bl	800127c <HAL_GetTick>
 80026cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ce:	e00b      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7fe fdd4 	bl	800127c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	; 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d902      	bls.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	74fb      	strb	r3, [r7, #19]
            break;
 80026e6:	e006      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e8:	4b5b      	ldr	r3, [pc, #364]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0ec      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026fc:	4b56      	ldr	r3, [pc, #344]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270a:	4953      	ldr	r1, [pc, #332]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002712:	e004      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
 8002718:	e001      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800271e:	7c7b      	ldrb	r3, [r7, #17]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002724:	4b4c      	ldr	r3, [pc, #304]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	4a4b      	ldr	r2, [pc, #300]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800272a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800273c:	4b46      	ldr	r3, [pc, #280]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f023 0203 	bic.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4943      	ldr	r1, [pc, #268]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800275e:	4b3e      	ldr	r3, [pc, #248]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f023 020c 	bic.w	r2, r3, #12
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	493a      	ldr	r1, [pc, #232]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002780:	4b35      	ldr	r3, [pc, #212]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	4932      	ldr	r1, [pc, #200]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027a2:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b0:	4929      	ldr	r1, [pc, #164]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	4921      	ldr	r1, [pc, #132]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	4918      	ldr	r1, [pc, #96]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4910      	ldr	r1, [pc, #64]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d02c      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800282c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002830:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	4907      	ldr	r1, [pc, #28]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002848:	d10a      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800284a:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	4a02      	ldr	r2, [pc, #8]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002854:	60d3      	str	r3, [r2, #12]
 8002856:	e015      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002858:	40021000 	.word	0x40021000
 800285c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002868:	d10c      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3304      	adds	r3, #4
 800286e:	2101      	movs	r1, #1
 8002870:	4618      	mov	r0, r3
 8002872:	f000 f871 	bl	8002958 <RCCEx_PLLSAI1_Config>
 8002876:	4603      	mov	r3, r0
 8002878:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800287a:	7cfb      	ldrb	r3, [r7, #19]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002880:	7cfb      	ldrb	r3, [r7, #19]
 8002882:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d028      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	492d      	ldr	r1, [pc, #180]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ae:	d106      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a27      	ldr	r2, [pc, #156]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ba:	60d3      	str	r3, [r2, #12]
 80028bc:	e011      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028c6:	d10c      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	2101      	movs	r1, #1
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f842 	bl	8002958 <RCCEx_PLLSAI1_Config>
 80028d4:	4603      	mov	r3, r0
 80028d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d01c      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028ee:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fc:	4915      	ldr	r1, [pc, #84]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002908:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800290c:	d10c      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3304      	adds	r3, #4
 8002912:	2102      	movs	r1, #2
 8002914:	4618      	mov	r0, r3
 8002916:	f000 f81f 	bl	8002958 <RCCEx_PLLSAI1_Config>
 800291a:	4603      	mov	r3, r0
 800291c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002934:	4b07      	ldr	r3, [pc, #28]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	4904      	ldr	r1, [pc, #16]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800294a:	7cbb      	ldrb	r3, [r7, #18]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000

08002958 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002966:	4b73      	ldr	r3, [pc, #460]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d018      	beq.n	80029a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002972:	4b70      	ldr	r3, [pc, #448]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0203 	and.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d10d      	bne.n	800299e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
       ||
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800298a:	4b6a      	ldr	r3, [pc, #424]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
       ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d044      	beq.n	8002a28 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
 80029a2:	e041      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d00c      	beq.n	80029c6 <RCCEx_PLLSAI1_Config+0x6e>
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d013      	beq.n	80029d8 <RCCEx_PLLSAI1_Config+0x80>
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d120      	bne.n	80029f6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029b4:	4b5f      	ldr	r3, [pc, #380]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d11d      	bne.n	80029fc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c4:	e01a      	b.n	80029fc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029c6:	4b5b      	ldr	r3, [pc, #364]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d6:	e013      	b.n	8002a00 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029d8:	4b56      	ldr	r3, [pc, #344]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10f      	bne.n	8002a04 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029e4:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029f4:	e006      	b.n	8002a04 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
      break;
 80029fa:	e004      	b.n	8002a06 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80029fc:	bf00      	nop
 80029fe:	e002      	b.n	8002a06 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002a00:	bf00      	nop
 8002a02:	e000      	b.n	8002a06 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002a04:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10d      	bne.n	8002a28 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a0c:	4b49      	ldr	r3, [pc, #292]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6819      	ldr	r1, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	430b      	orrs	r3, r1
 8002a22:	4944      	ldr	r1, [pc, #272]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d17c      	bne.n	8002b28 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a2e:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a40      	ldr	r2, [pc, #256]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a3a:	f7fe fc1f 	bl	800127c <HAL_GetTick>
 8002a3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a40:	e009      	b.n	8002a56 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a42:	f7fe fc1b 	bl	800127c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d902      	bls.n	8002a56 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	73fb      	strb	r3, [r7, #15]
        break;
 8002a54:	e005      	b.n	8002a62 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a56:	4b37      	ldr	r3, [pc, #220]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ef      	bne.n	8002a42 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d15f      	bne.n	8002b28 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d110      	bne.n	8002a90 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a6e:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002a76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6892      	ldr	r2, [r2, #8]
 8002a7e:	0211      	lsls	r1, r2, #8
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	68d2      	ldr	r2, [r2, #12]
 8002a84:	06d2      	lsls	r2, r2, #27
 8002a86:	430a      	orrs	r2, r1
 8002a88:	492a      	ldr	r1, [pc, #168]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	610b      	str	r3, [r1, #16]
 8002a8e:	e027      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d112      	bne.n	8002abc <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a96:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6892      	ldr	r2, [r2, #8]
 8002aa6:	0211      	lsls	r1, r2, #8
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6912      	ldr	r2, [r2, #16]
 8002aac:	0852      	lsrs	r2, r2, #1
 8002aae:	3a01      	subs	r2, #1
 8002ab0:	0552      	lsls	r2, r2, #21
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	491f      	ldr	r1, [pc, #124]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	610b      	str	r3, [r1, #16]
 8002aba:	e011      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ac4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6892      	ldr	r2, [r2, #8]
 8002acc:	0211      	lsls	r1, r2, #8
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6952      	ldr	r2, [r2, #20]
 8002ad2:	0852      	lsrs	r2, r2, #1
 8002ad4:	3a01      	subs	r2, #1
 8002ad6:	0652      	lsls	r2, r2, #25
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	4916      	ldr	r1, [pc, #88]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ae6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fe fbc6 	bl	800127c <HAL_GetTick>
 8002af0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002af2:	e009      	b.n	8002b08 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002af4:	f7fe fbc2 	bl	800127c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d902      	bls.n	8002b08 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	73fb      	strb	r3, [r7, #15]
          break;
 8002b06:	e005      	b.n	8002b14 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b08:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ef      	beq.n	8002af4 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	4904      	ldr	r1, [pc, #16]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000

08002b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e07c      	b.n	8002c44 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d106      	bne.n	8002b6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7fe f9d9 	bl	8000f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b80:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b8a:	d902      	bls.n	8002b92 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	e002      	b.n	8002b98 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ba0:	d007      	beq.n	8002bb2 <HAL_SPI_Init+0x7a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002baa:	d002      	beq.n	8002bb2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bc2:	d903      	bls.n	8002bcc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8002bca:	e002      	b.n	8002bd2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	ea42 0103 	orr.w	r1, r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	f003 0204 	and.w	r2, r3, #4
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	ea42 0103 	orr.w	r1, r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_SPI_Transmit+0x22>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e150      	b.n	8002f10 <HAL_SPI_Transmit+0x2c4>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c76:	f7fe fb01 	bl	800127c <HAL_GetTick>
 8002c7a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d002      	beq.n	8002c92 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c90:	e135      	b.n	8002efe <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HAL_SPI_Transmit+0x52>
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ca2:	e12c      	b.n	8002efe <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	88fa      	ldrh	r2, [r7, #6]
 8002cc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cee:	d107      	bne.n	8002d00 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cfe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d007      	beq.n	8002d1e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d26:	d94b      	bls.n	8002dc0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <HAL_SPI_Transmit+0xea>
 8002d30:	8afb      	ldrh	r3, [r7, #22]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d13e      	bne.n	8002db4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	881a      	ldrh	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	1c9a      	adds	r2, r3, #2
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d5a:	e02b      	b.n	8002db4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d112      	bne.n	8002d90 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	881a      	ldrh	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	1c9a      	adds	r2, r3, #2
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d8e:	e011      	b.n	8002db4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d90:	f7fe fa74 	bl	800127c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d803      	bhi.n	8002da8 <HAL_SPI_Transmit+0x15c>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da6:	d102      	bne.n	8002dae <HAL_SPI_Transmit+0x162>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002db2:	e0a4      	b.n	8002efe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1ce      	bne.n	8002d5c <HAL_SPI_Transmit+0x110>
 8002dbe:	e07c      	b.n	8002eba <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_SPI_Transmit+0x182>
 8002dc8:	8afb      	ldrh	r3, [r7, #22]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d170      	bne.n	8002eb0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d912      	bls.n	8002dfe <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	881a      	ldrh	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	1c9a      	adds	r2, r3, #2
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b02      	subs	r3, #2
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dfc:	e058      	b.n	8002eb0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	330c      	adds	r3, #12
 8002e08:	7812      	ldrb	r2, [r2, #0]
 8002e0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e24:	e044      	b.n	8002eb0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d12b      	bne.n	8002e8c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d912      	bls.n	8002e64 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	881a      	ldrh	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4e:	1c9a      	adds	r2, r3, #2
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b02      	subs	r3, #2
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e62:	e025      	b.n	8002eb0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	330c      	adds	r3, #12
 8002e6e:	7812      	ldrb	r2, [r2, #0]
 8002e70:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e8a:	e011      	b.n	8002eb0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e8c:	f7fe f9f6 	bl	800127c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d803      	bhi.n	8002ea4 <HAL_SPI_Transmit+0x258>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d102      	bne.n	8002eaa <HAL_SPI_Transmit+0x25e>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002eae:	e026      	b.n	8002efe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1b5      	bne.n	8002e26 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	6839      	ldr	r1, [r7, #0]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fc94 	bl	80037ec <SPI_EndRxTxTransaction>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	77fb      	strb	r3, [r7, #31]
 8002efa:	e000      	b.n	8002efe <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002efc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f34:	d112      	bne.n	8002f5c <HAL_SPI_Receive+0x44>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10e      	bne.n	8002f5c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2204      	movs	r2, #4
 8002f42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f908 	bl	8003168 <HAL_SPI_TransmitReceive>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	e101      	b.n	8003160 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_SPI_Receive+0x52>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e0fa      	b.n	8003160 <HAL_SPI_Receive+0x248>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f72:	f7fe f983 	bl	800127c <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d002      	beq.n	8002f8a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
 8002f86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f88:	e0e1      	b.n	800314e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_SPI_Receive+0x7e>
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f9a:	e0d8      	b.n	800314e <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	88fa      	ldrh	r2, [r7, #6]
 8002fb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	88fa      	ldrh	r2, [r7, #6]
 8002fbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fe6:	d908      	bls.n	8002ffa <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ff6:	605a      	str	r2, [r3, #4]
 8002ff8:	e007      	b.n	800300a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003008:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003012:	d107      	bne.n	8003024 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003022:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b40      	cmp	r3, #64	; 0x40
 8003030:	d007      	beq.n	8003042 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800304a:	d867      	bhi.n	800311c <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800304c:	e030      	b.n	80030b0 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d117      	bne.n	800308c <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f103 020c 	add.w	r2, r3, #12
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	7812      	ldrb	r2, [r2, #0]
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800308a:	e011      	b.n	80030b0 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800308c:	f7fe f8f6 	bl	800127c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d803      	bhi.n	80030a4 <HAL_SPI_Receive+0x18c>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a2:	d102      	bne.n	80030aa <HAL_SPI_Receive+0x192>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d102      	bne.n	80030b0 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030ae:	e04e      	b.n	800314e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1c8      	bne.n	800304e <HAL_SPI_Receive+0x136>
 80030bc:	e034      	b.n	8003128 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d115      	bne.n	80030f8 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	b292      	uxth	r2, r2
 80030d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	1c9a      	adds	r2, r3, #2
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80030f6:	e011      	b.n	800311c <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030f8:	f7fe f8c0 	bl	800127c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d803      	bhi.n	8003110 <HAL_SPI_Receive+0x1f8>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d102      	bne.n	8003116 <HAL_SPI_Receive+0x1fe>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	75fb      	strb	r3, [r7, #23]
          goto error;
 800311a:	e018      	b.n	800314e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ca      	bne.n	80030be <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	6839      	ldr	r1, [r7, #0]
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fb05 	bl	800373c <SPI_EndRxTransaction>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
 800314a:	e000      	b.n	800314e <HAL_SPI_Receive+0x236>
  }

error :
 800314c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800315e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	; 0x28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003176:	2301      	movs	r3, #1
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_SPI_TransmitReceive+0x26>
 800318a:	2302      	movs	r3, #2
 800318c:	e1fb      	b.n	8003586 <HAL_SPI_TransmitReceive+0x41e>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003196:	f7fe f871 	bl	800127c <HAL_GetTick>
 800319a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031a2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031b2:	7efb      	ldrb	r3, [r7, #27]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d00e      	beq.n	80031d6 <HAL_SPI_TransmitReceive+0x6e>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031be:	d106      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d102      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x66>
 80031c8:	7efb      	ldrb	r3, [r7, #27]
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d003      	beq.n	80031d6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
 80031d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80031d4:	e1cd      	b.n	8003572 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_SPI_TransmitReceive+0x80>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_SPI_TransmitReceive+0x80>
 80031e2:	887b      	ldrh	r3, [r7, #2]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d103      	bne.n	80031f0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80031ee:	e1c0      	b.n	8003572 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d003      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2205      	movs	r2, #5
 8003200:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	887a      	ldrh	r2, [r7, #2]
 800322a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003246:	d802      	bhi.n	800324e <HAL_SPI_TransmitReceive+0xe6>
 8003248:	8a3b      	ldrh	r3, [r7, #16]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d908      	bls.n	8003260 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	e007      	b.n	8003270 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800326e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b40      	cmp	r3, #64	; 0x40
 800327c:	d007      	beq.n	800328e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800328c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003296:	d97c      	bls.n	8003392 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_SPI_TransmitReceive+0x13e>
 80032a0:	8a7b      	ldrh	r3, [r7, #18]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d169      	bne.n	800337a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	881a      	ldrh	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	1c9a      	adds	r2, r3, #2
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ca:	e056      	b.n	800337a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d11b      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x1aa>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d016      	beq.n	8003312 <HAL_SPI_TransmitReceive+0x1aa>
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d113      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	881a      	ldrh	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	1c9a      	adds	r2, r3, #2
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b01      	cmp	r3, #1
 800331e:	d11c      	bne.n	800335a <HAL_SPI_TransmitReceive+0x1f2>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d016      	beq.n	800335a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	b292      	uxth	r2, r2
 8003338:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	1c9a      	adds	r2, r3, #2
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003356:	2301      	movs	r3, #1
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800335a:	f7fd ff8f 	bl	800127c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003366:	429a      	cmp	r2, r3
 8003368:	d807      	bhi.n	800337a <HAL_SPI_TransmitReceive+0x212>
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d003      	beq.n	800337a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003378:	e0fb      	b.n	8003572 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1a3      	bne.n	80032cc <HAL_SPI_TransmitReceive+0x164>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d19d      	bne.n	80032cc <HAL_SPI_TransmitReceive+0x164>
 8003390:	e0df      	b.n	8003552 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_SPI_TransmitReceive+0x23a>
 800339a:	8a7b      	ldrh	r3, [r7, #18]
 800339c:	2b01      	cmp	r3, #1
 800339e:	f040 80cb 	bne.w	8003538 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d912      	bls.n	80033d2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	881a      	ldrh	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	1c9a      	adds	r2, r3, #2
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b02      	subs	r3, #2
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033d0:	e0b2      	b.n	8003538 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	330c      	adds	r3, #12
 80033dc:	7812      	ldrb	r2, [r2, #0]
 80033de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033f8:	e09e      	b.n	8003538 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b02      	cmp	r3, #2
 8003406:	d134      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x30a>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d02f      	beq.n	8003472 <HAL_SPI_TransmitReceive+0x30a>
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	2b01      	cmp	r3, #1
 8003416:	d12c      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	d912      	bls.n	8003448 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	881a      	ldrh	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	1c9a      	adds	r2, r3, #2
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b02      	subs	r3, #2
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003446:	e012      	b.n	800346e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	330c      	adds	r3, #12
 8003452:	7812      	ldrb	r2, [r2, #0]
 8003454:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d148      	bne.n	8003512 <HAL_SPI_TransmitReceive+0x3aa>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d042      	beq.n	8003512 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	d923      	bls.n	80034e0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	b292      	uxth	r2, r2
 80034a4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	1c9a      	adds	r2, r3, #2
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b02      	subs	r3, #2
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d81f      	bhi.n	800350e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	e016      	b.n	800350e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f103 020c 	add.w	r2, r3, #12
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	7812      	ldrb	r2, [r2, #0]
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800350e:	2301      	movs	r3, #1
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003512:	f7fd feb3 	bl	800127c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800351e:	429a      	cmp	r2, r3
 8003520:	d803      	bhi.n	800352a <HAL_SPI_TransmitReceive+0x3c2>
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d102      	bne.n	8003530 <HAL_SPI_TransmitReceive+0x3c8>
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	2b00      	cmp	r3, #0
 800352e:	d103      	bne.n	8003538 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003536:	e01c      	b.n	8003572 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	f47f af5b 	bne.w	80033fa <HAL_SPI_TransmitReceive+0x292>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	f47f af54 	bne.w	80033fa <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f948 	bl	80037ec <SPI_EndRxTxTransaction>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d006      	beq.n	8003570 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	661a      	str	r2, [r3, #96]	; 0x60
 800356e:	e000      	b.n	8003572 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003570:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003582:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003586:	4618      	mov	r0, r3
 8003588:	3728      	adds	r7, #40	; 0x28
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800359e:	e04c      	b.n	800363a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d048      	beq.n	800363a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80035a8:	f7fd fe68 	bl	800127c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d902      	bls.n	80035be <SPI_WaitFlagStateUntilTimeout+0x30>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d13d      	bne.n	800363a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035d6:	d111      	bne.n	80035fc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e0:	d004      	beq.n	80035ec <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ea:	d107      	bne.n	80035fc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003604:	d10f      	bne.n	8003626 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003624:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e00f      	b.n	800365a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4013      	ands	r3, r2
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	429a      	cmp	r2, r3
 8003648:	bf0c      	ite	eq
 800364a:	2301      	moveq	r3, #1
 800364c:	2300      	movne	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	429a      	cmp	r2, r3
 8003656:	d1a3      	bne.n	80035a0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003670:	e057      	b.n	8003722 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003678:	d106      	bne.n	8003688 <SPI_WaitFifoStateUntilTimeout+0x26>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d103      	bne.n	8003688 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	330c      	adds	r3, #12
 8003686:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d048      	beq.n	8003722 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003690:	f7fd fdf4 	bl	800127c <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d902      	bls.n	80036a6 <SPI_WaitFifoStateUntilTimeout+0x44>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d13d      	bne.n	8003722 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036be:	d111      	bne.n	80036e4 <SPI_WaitFifoStateUntilTimeout+0x82>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c8:	d004      	beq.n	80036d4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d2:	d107      	bne.n	80036e4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ec:	d10f      	bne.n	800370e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800370c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e008      	b.n	8003734 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4013      	ands	r3, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	429a      	cmp	r2, r3
 8003730:	d19f      	bne.n	8003672 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003750:	d111      	bne.n	8003776 <SPI_EndRxTransaction+0x3a>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800375a:	d004      	beq.n	8003766 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003764:	d107      	bne.n	8003776 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003774:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2200      	movs	r2, #0
 800377e:	2180      	movs	r1, #128	; 0x80
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff ff04 	bl	800358e <SPI_WaitFlagStateUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003790:	f043 0220 	orr.w	r2, r3, #32
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e023      	b.n	80037e4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a4:	d11d      	bne.n	80037e2 <SPI_EndRxTransaction+0xa6>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ae:	d004      	beq.n	80037ba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b8:	d113      	bne.n	80037e2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7ff ff4b 	bl	8003662 <SPI_WaitFifoStateUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d6:	f043 0220 	orr.w	r2, r3, #32
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e000      	b.n	80037e4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2200      	movs	r2, #0
 8003800:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7ff ff2c 	bl	8003662 <SPI_WaitFifoStateUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e027      	b.n	8003870 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2200      	movs	r2, #0
 8003828:	2180      	movs	r1, #128	; 0x80
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f7ff feaf 	bl	800358e <SPI_WaitFlagStateUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e014      	b.n	8003870 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2200      	movs	r2, #0
 800384e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f7ff ff05 	bl	8003662 <SPI_WaitFifoStateUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003862:	f043 0220 	orr.w	r2, r3, #32
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e000      	b.n	8003870 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e01d      	b.n	80038c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f815 	bl	80038ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f000 f986 	bl	8003bc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <HAL_TIM_Base_Start_IT+0x50>)
 8003904:	4013      	ands	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b06      	cmp	r3, #6
 800390c:	d00b      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0x42>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003914:	d007      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 0201 	orr.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	00010007 	.word	0x00010007

08003938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b02      	cmp	r3, #2
 800394c:	d122      	bne.n	8003994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d11b      	bne.n	8003994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0202 	mvn.w	r2, #2
 8003964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f905 	bl	8003b8a <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8f7 	bl	8003b76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f908 	bl	8003b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d122      	bne.n	80039e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d11b      	bne.n	80039e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0204 	mvn.w	r2, #4
 80039b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8db 	bl	8003b8a <HAL_TIM_IC_CaptureCallback>
 80039d4:	e005      	b.n	80039e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8cd 	bl	8003b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f8de 	bl	8003b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d122      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d11b      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0208 	mvn.w	r2, #8
 8003a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2204      	movs	r2, #4
 8003a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8b1 	bl	8003b8a <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8a3 	bl	8003b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f8b4 	bl	8003b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d122      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d11b      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0210 	mvn.w	r2, #16
 8003a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2208      	movs	r2, #8
 8003a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f887 	bl	8003b8a <HAL_TIM_IC_CaptureCallback>
 8003a7c:	e005      	b.n	8003a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f879 	bl	8003b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f88a 	bl	8003b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d10e      	bne.n	8003abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d107      	bne.n	8003abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0201 	mvn.w	r2, #1
 8003ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd f9f2 	bl	8000ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac6:	2b80      	cmp	r3, #128	; 0x80
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d107      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8de 	bl	8003ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af6:	d10e      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b02:	2b80      	cmp	r3, #128	; 0x80
 8003b04:	d107      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f8d1 	bl	8003cb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d10e      	bne.n	8003b42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d107      	bne.n	8003b42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f838 	bl	8003bb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d10e      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d107      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f06f 0220 	mvn.w	r2, #32
 8003b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f891 	bl	8003c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a2a      	ldr	r2, [pc, #168]	; (8003c84 <TIM_Base_SetConfig+0xbc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <TIM_Base_SetConfig+0x20>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be6:	d108      	bne.n	8003bfa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <TIM_Base_SetConfig+0xbc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00b      	beq.n	8003c1a <TIM_Base_SetConfig+0x52>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c08:	d007      	beq.n	8003c1a <TIM_Base_SetConfig+0x52>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <TIM_Base_SetConfig+0xc0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d003      	beq.n	8003c1a <TIM_Base_SetConfig+0x52>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <TIM_Base_SetConfig+0xc4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d108      	bne.n	8003c2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a0c      	ldr	r2, [pc, #48]	; (8003c84 <TIM_Base_SetConfig+0xbc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d007      	beq.n	8003c68 <TIM_Base_SetConfig+0xa0>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a0b      	ldr	r2, [pc, #44]	; (8003c88 <TIM_Base_SetConfig+0xc0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <TIM_Base_SetConfig+0xa0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <TIM_Base_SetConfig+0xc4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d103      	bne.n	8003c70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	615a      	str	r2, [r3, #20]
}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40014400 	.word	0x40014400

08003c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e040      	b.n	8003d60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fd f956 	bl	8000fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2224      	movs	r2, #36	; 0x24
 8003cf8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0201 	bic.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f8c0 	bl	8003e90 <UART_SetConfig>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e022      	b.n	8003d60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fb9a 	bl	800445c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fc21 	bl	80045a0 <UART_CheckIdleState>
 8003d5e:	4603      	mov	r3, r0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	; 0x28
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	f040 8081 	bne.w	8003e84 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_UART_Transmit+0x26>
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e079      	b.n	8003e86 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_UART_Transmit+0x38>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e072      	b.n	8003e86 <HAL_UART_Transmit+0x11e>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2221      	movs	r2, #33	; 0x21
 8003db2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003db4:	f7fd fa62 	bl	800127c <HAL_GetTick>
 8003db8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	88fa      	ldrh	r2, [r7, #6]
 8003dbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	88fa      	ldrh	r2, [r7, #6]
 8003dc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd2:	d108      	bne.n	8003de6 <HAL_UART_Transmit+0x7e>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d104      	bne.n	8003de6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	61bb      	str	r3, [r7, #24]
 8003de4:	e003      	b.n	8003dee <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003df6:	e02d      	b.n	8003e54 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2180      	movs	r1, #128	; 0x80
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fc11 	bl	800462a <UART_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e039      	b.n	8003e86 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	881a      	ldrh	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e24:	b292      	uxth	r2, r2
 8003e26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	e008      	b.n	8003e42 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	b292      	uxth	r2, r2
 8003e3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1cb      	bne.n	8003df8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2200      	movs	r2, #0
 8003e68:	2140      	movs	r1, #64	; 0x40
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fbdd 	bl	800462a <UART_WaitOnFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e005      	b.n	8003e86 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	e000      	b.n	8003e86 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
  }
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e90:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003e94:	b08a      	sub	sp, #40	; 0x28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4bb3      	ldr	r3, [pc, #716]	; (8004194 <UART_SetConfig+0x304>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4aa9      	ldr	r2, [pc, #676]	; (8004198 <UART_SetConfig+0x308>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d004      	beq.n	8003f02 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efe:	4313      	orrs	r3, r2
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f12:	430a      	orrs	r2, r1
 8003f14:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4aa0      	ldr	r2, [pc, #640]	; (800419c <UART_SetConfig+0x30c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d126      	bne.n	8003f6e <UART_SetConfig+0xde>
 8003f20:	4b9f      	ldr	r3, [pc, #636]	; (80041a0 <UART_SetConfig+0x310>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d81a      	bhi.n	8003f64 <UART_SetConfig+0xd4>
 8003f2e:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <UART_SetConfig+0xa4>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f55 	.word	0x08003f55
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f5d 	.word	0x08003f5d
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4a:	e080      	b.n	800404e <UART_SetConfig+0x1be>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f52:	e07c      	b.n	800404e <UART_SetConfig+0x1be>
 8003f54:	2304      	movs	r3, #4
 8003f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5a:	e078      	b.n	800404e <UART_SetConfig+0x1be>
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f62:	e074      	b.n	800404e <UART_SetConfig+0x1be>
 8003f64:	2310      	movs	r3, #16
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6a:	bf00      	nop
 8003f6c:	e06f      	b.n	800404e <UART_SetConfig+0x1be>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a8c      	ldr	r2, [pc, #560]	; (80041a4 <UART_SetConfig+0x314>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d138      	bne.n	8003fea <UART_SetConfig+0x15a>
 8003f78:	4b89      	ldr	r3, [pc, #548]	; (80041a0 <UART_SetConfig+0x310>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d82c      	bhi.n	8003fe0 <UART_SetConfig+0x150>
 8003f86:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <UART_SetConfig+0xfc>)
 8003f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8c:	08003fc1 	.word	0x08003fc1
 8003f90:	08003fe1 	.word	0x08003fe1
 8003f94:	08003fe1 	.word	0x08003fe1
 8003f98:	08003fe1 	.word	0x08003fe1
 8003f9c:	08003fd1 	.word	0x08003fd1
 8003fa0:	08003fe1 	.word	0x08003fe1
 8003fa4:	08003fe1 	.word	0x08003fe1
 8003fa8:	08003fe1 	.word	0x08003fe1
 8003fac:	08003fc9 	.word	0x08003fc9
 8003fb0:	08003fe1 	.word	0x08003fe1
 8003fb4:	08003fe1 	.word	0x08003fe1
 8003fb8:	08003fe1 	.word	0x08003fe1
 8003fbc:	08003fd9 	.word	0x08003fd9
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc6:	e042      	b.n	800404e <UART_SetConfig+0x1be>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fce:	e03e      	b.n	800404e <UART_SetConfig+0x1be>
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd6:	e03a      	b.n	800404e <UART_SetConfig+0x1be>
 8003fd8:	2308      	movs	r3, #8
 8003fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fde:	e036      	b.n	800404e <UART_SetConfig+0x1be>
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe6:	bf00      	nop
 8003fe8:	e031      	b.n	800404e <UART_SetConfig+0x1be>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6a      	ldr	r2, [pc, #424]	; (8004198 <UART_SetConfig+0x308>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d129      	bne.n	8004048 <UART_SetConfig+0x1b8>
 8003ff4:	4b6a      	ldr	r3, [pc, #424]	; (80041a0 <UART_SetConfig+0x310>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004002:	d014      	beq.n	800402e <UART_SetConfig+0x19e>
 8004004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004008:	d802      	bhi.n	8004010 <UART_SetConfig+0x180>
 800400a:	2b00      	cmp	r3, #0
 800400c:	d007      	beq.n	800401e <UART_SetConfig+0x18e>
 800400e:	e016      	b.n	800403e <UART_SetConfig+0x1ae>
 8004010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004014:	d007      	beq.n	8004026 <UART_SetConfig+0x196>
 8004016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800401a:	d00c      	beq.n	8004036 <UART_SetConfig+0x1a6>
 800401c:	e00f      	b.n	800403e <UART_SetConfig+0x1ae>
 800401e:	2300      	movs	r3, #0
 8004020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004024:	e013      	b.n	800404e <UART_SetConfig+0x1be>
 8004026:	2302      	movs	r3, #2
 8004028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800402c:	e00f      	b.n	800404e <UART_SetConfig+0x1be>
 800402e:	2304      	movs	r3, #4
 8004030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004034:	e00b      	b.n	800404e <UART_SetConfig+0x1be>
 8004036:	2308      	movs	r3, #8
 8004038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403c:	e007      	b.n	800404e <UART_SetConfig+0x1be>
 800403e:	2310      	movs	r3, #16
 8004040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004044:	bf00      	nop
 8004046:	e002      	b.n	800404e <UART_SetConfig+0x1be>
 8004048:	2310      	movs	r3, #16
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a51      	ldr	r2, [pc, #324]	; (8004198 <UART_SetConfig+0x308>)
 8004054:	4293      	cmp	r3, r2
 8004056:	f040 80fa 	bne.w	800424e <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800405a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800405e:	2b08      	cmp	r3, #8
 8004060:	d823      	bhi.n	80040aa <UART_SetConfig+0x21a>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <UART_SetConfig+0x1d8>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	0800408d 	.word	0x0800408d
 800406c:	080040ab 	.word	0x080040ab
 8004070:	08004095 	.word	0x08004095
 8004074:	080040ab 	.word	0x080040ab
 8004078:	0800409b 	.word	0x0800409b
 800407c:	080040ab 	.word	0x080040ab
 8004080:	080040ab 	.word	0x080040ab
 8004084:	080040ab 	.word	0x080040ab
 8004088:	080040a3 	.word	0x080040a3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800408c:	f7fe f9b4 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8004090:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004092:	e00d      	b.n	80040b0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004094:	4b44      	ldr	r3, [pc, #272]	; (80041a8 <UART_SetConfig+0x318>)
 8004096:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004098:	e00a      	b.n	80040b0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800409a:	f7fe f917 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 800409e:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040a0:	e006      	b.n	80040b0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80040a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040a8:	e002      	b.n	80040b0 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	76fb      	strb	r3, [r7, #27]
        break;
 80040ae:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 81c6 	beq.w	8004444 <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	4413      	add	r3, r2
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d305      	bcc.n	80040d4 <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d902      	bls.n	80040da <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	76fb      	strb	r3, [r7, #27]
 80040d8:	e1b4      	b.n	8004444 <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 80040da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040de:	2b08      	cmp	r3, #8
 80040e0:	f200 80a2 	bhi.w	8004228 <UART_SetConfig+0x398>
 80040e4:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <UART_SetConfig+0x25c>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	08004111 	.word	0x08004111
 80040f0:	08004229 	.word	0x08004229
 80040f4:	0800415f 	.word	0x0800415f
 80040f8:	08004229 	.word	0x08004229
 80040fc:	080041b1 	.word	0x080041b1
 8004100:	08004229 	.word	0x08004229
 8004104:	08004229 	.word	0x08004229
 8004108:	08004229 	.word	0x08004229
 800410c:	080041ff 	.word	0x080041ff
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7fe f972 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8004114:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4619      	mov	r1, r3
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	f04f 0400 	mov.w	r4, #0
 8004126:	0214      	lsls	r4, r2, #8
 8004128:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800412c:	020b      	lsls	r3, r1, #8
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6852      	ldr	r2, [r2, #4]
 8004132:	0852      	lsrs	r2, r2, #1
 8004134:	4611      	mov	r1, r2
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	eb13 0b01 	adds.w	fp, r3, r1
 800413e:	eb44 0c02 	adc.w	ip, r4, r2
 8004142:	4658      	mov	r0, fp
 8004144:	4661      	mov	r1, ip
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f04f 0400 	mov.w	r4, #0
 800414e:	461a      	mov	r2, r3
 8004150:	4623      	mov	r3, r4
 8004152:	f7fc f83b 	bl	80001cc <__aeabi_uldivmod>
 8004156:	4603      	mov	r3, r0
 8004158:	460c      	mov	r4, r1
 800415a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800415c:	e067      	b.n	800422e <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	085b      	lsrs	r3, r3, #1
 8004164:	f04f 0400 	mov.w	r4, #0
 8004168:	4910      	ldr	r1, [pc, #64]	; (80041ac <UART_SetConfig+0x31c>)
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	eb13 0b01 	adds.w	fp, r3, r1
 8004172:	eb44 0c02 	adc.w	ip, r4, r2
 8004176:	4658      	mov	r0, fp
 8004178:	4661      	mov	r1, ip
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f04f 0400 	mov.w	r4, #0
 8004182:	461a      	mov	r2, r3
 8004184:	4623      	mov	r3, r4
 8004186:	f7fc f821 	bl	80001cc <__aeabi_uldivmod>
 800418a:	4603      	mov	r3, r0
 800418c:	460c      	mov	r4, r1
 800418e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004190:	e04d      	b.n	800422e <UART_SetConfig+0x39e>
 8004192:	bf00      	nop
 8004194:	efff69f3 	.word	0xefff69f3
 8004198:	40008000 	.word	0x40008000
 800419c:	40013800 	.word	0x40013800
 80041a0:	40021000 	.word	0x40021000
 80041a4:	40004400 	.word	0x40004400
 80041a8:	00f42400 	.word	0x00f42400
 80041ac:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80041b0:	f7fe f88c 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 80041b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	4619      	mov	r1, r3
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	f04f 0400 	mov.w	r4, #0
 80041c6:	0214      	lsls	r4, r2, #8
 80041c8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80041cc:	020b      	lsls	r3, r1, #8
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6852      	ldr	r2, [r2, #4]
 80041d2:	0852      	lsrs	r2, r2, #1
 80041d4:	4611      	mov	r1, r2
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	eb13 0b01 	adds.w	fp, r3, r1
 80041de:	eb44 0c02 	adc.w	ip, r4, r2
 80041e2:	4658      	mov	r0, fp
 80041e4:	4661      	mov	r1, ip
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f04f 0400 	mov.w	r4, #0
 80041ee:	461a      	mov	r2, r3
 80041f0:	4623      	mov	r3, r4
 80041f2:	f7fb ffeb 	bl	80001cc <__aeabi_uldivmod>
 80041f6:	4603      	mov	r3, r0
 80041f8:	460c      	mov	r4, r1
 80041fa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80041fc:	e017      	b.n	800422e <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	f04f 0400 	mov.w	r4, #0
 8004208:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800420c:	f144 0100 	adc.w	r1, r4, #0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f04f 0400 	mov.w	r4, #0
 8004218:	461a      	mov	r2, r3
 800421a:	4623      	mov	r3, r4
 800421c:	f7fb ffd6 	bl	80001cc <__aeabi_uldivmod>
 8004220:	4603      	mov	r3, r0
 8004222:	460c      	mov	r4, r1
 8004224:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004226:	e002      	b.n	800422e <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	76fb      	strb	r3, [r7, #27]
            break;
 800422c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004234:	d308      	bcc.n	8004248 <UART_SetConfig+0x3b8>
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800423c:	d204      	bcs.n	8004248 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	e0fd      	b.n	8004444 <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	76fb      	strb	r3, [r7, #27]
 800424c:	e0fa      	b.n	8004444 <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004256:	f040 8083 	bne.w	8004360 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 800425a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800425e:	2b08      	cmp	r3, #8
 8004260:	d85e      	bhi.n	8004320 <UART_SetConfig+0x490>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <UART_SetConfig+0x3d8>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	0800428d 	.word	0x0800428d
 800426c:	080042ad 	.word	0x080042ad
 8004270:	080042cd 	.word	0x080042cd
 8004274:	08004321 	.word	0x08004321
 8004278:	080042e9 	.word	0x080042e9
 800427c:	08004321 	.word	0x08004321
 8004280:	08004321 	.word	0x08004321
 8004284:	08004321 	.word	0x08004321
 8004288:	08004309 	.word	0x08004309
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800428c:	f7fe f8b4 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8004290:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	005a      	lsls	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	441a      	add	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042aa:	e03c      	b.n	8004326 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042ac:	f7fe f8ba 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 80042b0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	005a      	lsls	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	441a      	add	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042ca:	e02c      	b.n	8004326 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80042d6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6852      	ldr	r2, [r2, #4]
 80042de:	fbb3 f3f2 	udiv	r3, r3, r2
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042e6:	e01e      	b.n	8004326 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e8:	f7fd fff0 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 80042ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	005a      	lsls	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	085b      	lsrs	r3, r3, #1
 80042f8:	441a      	add	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004302:	b29b      	uxth	r3, r3
 8004304:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004306:	e00e      	b.n	8004326 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	fbb2 f3f3 	udiv	r3, r2, r3
 800431a:	b29b      	uxth	r3, r3
 800431c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800431e:	e002      	b.n	8004326 <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	76fb      	strb	r3, [r7, #27]
        break;
 8004324:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	2b0f      	cmp	r3, #15
 800432a:	d916      	bls.n	800435a <UART_SetConfig+0x4ca>
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004332:	d212      	bcs.n	800435a <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	b29b      	uxth	r3, r3
 8004338:	f023 030f 	bic.w	r3, r3, #15
 800433c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	b29b      	uxth	r3, r3
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	b29a      	uxth	r2, r3
 800434a:	89fb      	ldrh	r3, [r7, #14]
 800434c:	4313      	orrs	r3, r2
 800434e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	89fa      	ldrh	r2, [r7, #14]
 8004356:	60da      	str	r2, [r3, #12]
 8004358:	e074      	b.n	8004444 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	76fb      	strb	r3, [r7, #27]
 800435e:	e071      	b.n	8004444 <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8004360:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004364:	2b08      	cmp	r3, #8
 8004366:	d85c      	bhi.n	8004422 <UART_SetConfig+0x592>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0x4e0>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	08004395 	.word	0x08004395
 8004374:	080043b3 	.word	0x080043b3
 8004378:	080043d1 	.word	0x080043d1
 800437c:	08004423 	.word	0x08004423
 8004380:	080043ed 	.word	0x080043ed
 8004384:	08004423 	.word	0x08004423
 8004388:	08004423 	.word	0x08004423
 800438c:	08004423 	.word	0x08004423
 8004390:	0800440b 	.word	0x0800440b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004394:	f7fe f830 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8004398:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	085a      	lsrs	r2, r3, #1
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	441a      	add	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043b0:	e03a      	b.n	8004428 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b2:	f7fe f837 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 80043b6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	085a      	lsrs	r2, r3, #1
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	441a      	add	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043ce:	e02b      	b.n	8004428 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80043da:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6852      	ldr	r2, [r2, #4]
 80043e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043ea:	e01d      	b.n	8004428 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ec:	f7fd ff6e 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 80043f0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	085a      	lsrs	r2, r3, #1
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	441a      	add	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	b29b      	uxth	r3, r3
 8004406:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004408:	e00e      	b.n	8004428 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	fbb2 f3f3 	udiv	r3, r2, r3
 800441c:	b29b      	uxth	r3, r3
 800441e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004420:	e002      	b.n	8004428 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	76fb      	strb	r3, [r7, #27]
        break;
 8004426:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	2b0f      	cmp	r3, #15
 800442c:	d908      	bls.n	8004440 <UART_SetConfig+0x5b0>
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004434:	d204      	bcs.n	8004440 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	e001      	b.n	8004444 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004450:	7efb      	ldrb	r3, [r7, #27]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3728      	adds	r7, #40	; 0x28
 8004456:	46bd      	mov	sp, r7
 8004458:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800445c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01a      	beq.n	8004572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455a:	d10a      	bne.n	8004572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]
  }
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80045ae:	f7fc fe65 	bl	800127c <HAL_GetTick>
 80045b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d10e      	bne.n	80045e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f82a 	bl	800462a <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e020      	b.n	8004622 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d10e      	bne.n	800460c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f814 	bl	800462a <UART_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e00a      	b.n	8004622 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	4613      	mov	r3, r2
 8004638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463a:	e05d      	b.n	80046f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d059      	beq.n	80046f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004644:	f7fc fe1a 	bl	800127c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	429a      	cmp	r2, r3
 8004652:	d302      	bcc.n	800465a <UART_WaitOnFlagUntilTimeout+0x30>
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d11b      	bne.n	8004692 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004668:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e042      	b.n	8004718 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d02b      	beq.n	80046f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ae:	d123      	bne.n	80046f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046b8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046c8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0201 	bic.w	r2, r2, #1
 80046d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e00f      	b.n	8004718 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	69da      	ldr	r2, [r3, #28]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4013      	ands	r3, r2
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	429a      	cmp	r2, r3
 8004706:	bf0c      	ite	eq
 8004708:	2301      	moveq	r3, #1
 800470a:	2300      	movne	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	429a      	cmp	r2, r3
 8004714:	d092      	beq.n	800463c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <__libc_init_array>:
 8004720:	b570      	push	{r4, r5, r6, lr}
 8004722:	4e0d      	ldr	r6, [pc, #52]	; (8004758 <__libc_init_array+0x38>)
 8004724:	4c0d      	ldr	r4, [pc, #52]	; (800475c <__libc_init_array+0x3c>)
 8004726:	1ba4      	subs	r4, r4, r6
 8004728:	10a4      	asrs	r4, r4, #2
 800472a:	2500      	movs	r5, #0
 800472c:	42a5      	cmp	r5, r4
 800472e:	d109      	bne.n	8004744 <__libc_init_array+0x24>
 8004730:	4e0b      	ldr	r6, [pc, #44]	; (8004760 <__libc_init_array+0x40>)
 8004732:	4c0c      	ldr	r4, [pc, #48]	; (8004764 <__libc_init_array+0x44>)
 8004734:	f000 f820 	bl	8004778 <_init>
 8004738:	1ba4      	subs	r4, r4, r6
 800473a:	10a4      	asrs	r4, r4, #2
 800473c:	2500      	movs	r5, #0
 800473e:	42a5      	cmp	r5, r4
 8004740:	d105      	bne.n	800474e <__libc_init_array+0x2e>
 8004742:	bd70      	pop	{r4, r5, r6, pc}
 8004744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004748:	4798      	blx	r3
 800474a:	3501      	adds	r5, #1
 800474c:	e7ee      	b.n	800472c <__libc_init_array+0xc>
 800474e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004752:	4798      	blx	r3
 8004754:	3501      	adds	r5, #1
 8004756:	e7f2      	b.n	800473e <__libc_init_array+0x1e>
 8004758:	080047f4 	.word	0x080047f4
 800475c:	080047f4 	.word	0x080047f4
 8004760:	080047f4 	.word	0x080047f4
 8004764:	080047f8 	.word	0x080047f8

08004768 <memset>:
 8004768:	4402      	add	r2, r0
 800476a:	4603      	mov	r3, r0
 800476c:	4293      	cmp	r3, r2
 800476e:	d100      	bne.n	8004772 <memset+0xa>
 8004770:	4770      	bx	lr
 8004772:	f803 1b01 	strb.w	r1, [r3], #1
 8004776:	e7f9      	b.n	800476c <memset+0x4>

08004778 <_init>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr

08004784 <_fini>:
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	bf00      	nop
 8004788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478a:	bc08      	pop	{r3}
 800478c:	469e      	mov	lr, r3
 800478e:	4770      	bx	lr
